"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _name = require("../utilities/name");
var _fileNames = require("../fileNames");
function getBNF(bnfFileName) {
    var bnf = null;
    var customGrammarBNFFiles = this.getCustomGrammarBNFFiles(), customGrammarBNFFile = customGrammarBNFFiles.find(function(customGrammarBNFFile) {
        var customGrammarBNFFilePath = customGrammarBNFFile.getPath(), customGrammarBNFFileName = (0, _name.fileNameFromFilePath)(customGrammarBNFFilePath);
        if (customGrammarBNFFileName === bnfFileName) {
            return true;
        }
    }) || null;
    if (customGrammarBNFFile !== null) {
        var customGrammarBNFFileContent = customGrammarBNFFile.getContent();
        bnf = customGrammarBNFFileContent; ///
    }
    return bnf;
}
function getTermBNF() {
    var fileName = _fileNames.TERM_BNF_FILE_NAME, bnf = this.getBNF(fileName), termBNF = bnf; ///
    return termBNF;
}
function getStatementBNF() {
    var fileName = _fileNames.STATEMENT_BNF_FILE_NAME, bnf = this.getBNF(fileName), statementBNF = bnf; ///
    return statementBNF;
}
function getMetastatementBNF() {
    var fileName = _fileNames.METASTATEMENT_BNF_FILE_NAME, bnf = this.getBNF(fileName), metastatementBNF = bnf; ///
    return metastatementBNF;
}
var bnfMixins = {
    getBNF: getBNF,
    getTermBNF: getTermBNF,
    getStatementBNF: getStatementBNF,
    getMetastatementBNF: getMetastatementBNF
};
var _default = bnfMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvYm5mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBmaWxlTmFtZUZyb21GaWxlUGF0aCB9IGZyb20gXCIuLi91dGlsaXRpZXMvbmFtZVwiO1xuaW1wb3J0IHsgVEVSTV9CTkZfRklMRV9OQU1FLCBTVEFURU1FTlRfQk5GX0ZJTEVfTkFNRSwgTUVUQVNUQVRFTUVOVF9CTkZfRklMRV9OQU1FIH0gZnJvbSBcIi4uL2ZpbGVOYW1lc1wiO1xuXG5mdW5jdGlvbiBnZXRCTkYoYm5mRmlsZU5hbWUpIHtcbiAgbGV0IGJuZiA9IG51bGw7XG5cbiAgY29uc3QgY3VzdG9tR3JhbW1hckJORkZpbGVzID0gdGhpcy5nZXRDdXN0b21HcmFtbWFyQk5GRmlsZXMoKSxcbiAgICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGUgPSBjdXN0b21HcmFtbWFyQk5GRmlsZXMuZmluZCgoY3VzdG9tR3JhbW1hckJORkZpbGUpID0+IHtcbiAgICAgICAgY29uc3QgY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoID0gY3VzdG9tR3JhbW1hckJORkZpbGUuZ2V0UGF0aCgpLFxuICAgICAgICAgICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZU5hbWUgPSBmaWxlTmFtZUZyb21GaWxlUGF0aChjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgpO1xuXG4gICAgICAgIGlmIChjdXN0b21HcmFtbWFyQk5GRmlsZU5hbWUgPT09IGJuZkZpbGVOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pIHx8IG51bGw7XG5cbiAgaWYgKGN1c3RvbUdyYW1tYXJCTkZGaWxlICE9PSBudWxsKSB7XG4gICAgY29uc3QgY3VzdG9tR3JhbW1hckJORkZpbGVDb250ZW50ID0gY3VzdG9tR3JhbW1hckJORkZpbGUuZ2V0Q29udGVudCgpO1xuXG4gICAgYm5mID0gY3VzdG9tR3JhbW1hckJORkZpbGVDb250ZW50OyAgLy8vXG4gIH1cblxuICByZXR1cm4gYm5mO1xufVxuXG5mdW5jdGlvbiBnZXRUZXJtQk5GKCkge1xuICBjb25zdCBmaWxlTmFtZSA9IFRFUk1fQk5GX0ZJTEVfTkFNRSwgLy8vXG4gICAgICAgIGJuZiA9IHRoaXMuZ2V0Qk5GKGZpbGVOYW1lKSxcbiAgICAgICAgdGVybUJORiA9IGJuZjsgIC8vL1xuXG4gIHJldHVybiB0ZXJtQk5GO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0ZW1lbnRCTkYoKSB7XG4gIGNvbnN0IGZpbGVOYW1lID0gU1RBVEVNRU5UX0JORl9GSUxFX05BTUUsIC8vL1xuICAgICAgICBibmYgPSB0aGlzLmdldEJORihmaWxlTmFtZSksXG4gICAgICAgIHN0YXRlbWVudEJORiA9IGJuZjsgIC8vL1xuXG4gIHJldHVybiBzdGF0ZW1lbnRCTkY7XG59XG5cbmZ1bmN0aW9uIGdldE1ldGFzdGF0ZW1lbnRCTkYoKSB7XG4gIGNvbnN0IGZpbGVOYW1lID0gTUVUQVNUQVRFTUVOVF9CTkZfRklMRV9OQU1FLCAvLy9cbiAgICAgICAgYm5mID0gdGhpcy5nZXRCTkYoZmlsZU5hbWUpLFxuICAgICAgICBtZXRhc3RhdGVtZW50Qk5GID0gYm5mOyAgLy8vXG5cbiAgcmV0dXJuIG1ldGFzdGF0ZW1lbnRCTkY7XG59XG5cbmNvbnN0IGJuZk1peGlucyA9IHtcbiAgZ2V0Qk5GLFxuICBnZXRUZXJtQk5GLFxuICBnZXRTdGF0ZW1lbnRCTkYsXG4gIGdldE1ldGFzdGF0ZW1lbnRCTkZcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJuZk1peGlucztcbiJdLCJuYW1lcyI6WyJnZXRCTkYiLCJibmZGaWxlTmFtZSIsImJuZiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlcyIsImdldEN1c3RvbUdyYW1tYXJCTkZGaWxlcyIsImN1c3RvbUdyYW1tYXJCTkZGaWxlIiwiZmluZCIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImdldFBhdGgiLCJjdXN0b21HcmFtbWFyQk5GRmlsZU5hbWUiLCJmaWxlTmFtZUZyb21GaWxlUGF0aCIsImN1c3RvbUdyYW1tYXJCTkZGaWxlQ29udGVudCIsImdldENvbnRlbnQiLCJnZXRUZXJtQk5GIiwiZmlsZU5hbWUiLCJURVJNX0JORl9GSUxFX05BTUUiLCJ0ZXJtQk5GIiwiZ2V0U3RhdGVtZW50Qk5GIiwiU1RBVEVNRU5UX0JORl9GSUxFX05BTUUiLCJzdGF0ZW1lbnRCTkYiLCJnZXRNZXRhc3RhdGVtZW50Qk5GIiwiTUVUQVNUQVRFTUVOVF9CTkZfRklMRV9OQU1FIiwibWV0YXN0YXRlbWVudEJORiIsImJuZk1peGlucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBMERBOzs7ZUFBQTs7O29CQXhEcUM7eUJBQ29EO0FBRXpGLFNBQVNBLE9BQU9DLFdBQVcsRUFBRTtJQUMzQixJQUFJQyxNQUFNLElBQUk7SUFFZCxJQUFNQyx3QkFBd0IsSUFBSSxDQUFDQyx3QkFBd0IsSUFDckRDLHVCQUF1QkYsc0JBQXNCRyxJQUFJLENBQUMsU0FBQ0Qsc0JBQXlCO1FBQzVFLElBQU1FLDJCQUEyQkYscUJBQXFCRyxPQUFPLElBQ3ZEQywyQkFBMkJDLElBQUFBLDBCQUFvQixFQUFDSDtRQUV0RCxJQUFJRSw2QkFBNkJSLGFBQWE7WUFDNUMsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNILE1BQU0sSUFBSTtJQUVkLElBQUlJLHlCQUF5QixJQUFJLEVBQUU7UUFDakMsSUFBTU0sOEJBQThCTixxQkFBcUJPLFVBQVU7UUFFbkVWLE1BQU1TLDZCQUE4QixHQUFHO0lBQ3pDLENBQUM7SUFFRCxPQUFPVDtBQUNUO0FBRUEsU0FBU1csYUFBYTtJQUNwQixJQUFNQyxXQUFXQyw2QkFBa0IsRUFDN0JiLE1BQU0sSUFBSSxDQUFDRixNQUFNLENBQUNjLFdBQ2xCRSxVQUFVZCxLQUFNLEdBQUc7SUFFekIsT0FBT2M7QUFDVDtBQUVBLFNBQVNDLGtCQUFrQjtJQUN6QixJQUFNSCxXQUFXSSxrQ0FBdUIsRUFDbENoQixNQUFNLElBQUksQ0FBQ0YsTUFBTSxDQUFDYyxXQUNsQkssZUFBZWpCLEtBQU0sR0FBRztJQUU5QixPQUFPaUI7QUFDVDtBQUVBLFNBQVNDLHNCQUFzQjtJQUM3QixJQUFNTixXQUFXTyxzQ0FBMkIsRUFDdENuQixNQUFNLElBQUksQ0FBQ0YsTUFBTSxDQUFDYyxXQUNsQlEsbUJBQW1CcEIsS0FBTSxHQUFHO0lBRWxDLE9BQU9vQjtBQUNUO0FBRUEsSUFBTUMsWUFBWTtJQUNoQnZCLFFBQUFBO0lBQ0FhLFlBQUFBO0lBQ0FJLGlCQUFBQTtJQUNBRyxxQkFBQUE7QUFDRjtJQUVBLFdBQWVHIn0=