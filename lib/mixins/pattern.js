"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _name = require("../utilities/name");
var _fileNames = require("../fileNames");
function getPattern(patternFileName) {
    var pattern = null;
    var customGrammarPatternFiles = this.getCustomGrammarPatternFiles(), customGrammarPatternFile = customGrammarPatternFiles.find(function(customGrammarPatternFile) {
        var customGrammarPatternFilePath = customGrammarPatternFile.getPath(), customGrammarPatternFileName = (0, _name.fileNameFromFilePath)(customGrammarPatternFilePath);
        if (customGrammarPatternFileName === patternFileName) {
            return true;
        }
    }) || null;
    if (customGrammarPatternFile !== null) {
        var customGrammarPatternFileContent = customGrammarPatternFile.getContent();
        pattern = customGrammarPatternFileContent; ///
    }
    return pattern;
}
function getTypePattern() {
    var fileName = _fileNames.TYPE_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), typePattern = pattern; ///
    return typePattern;
}
function getSymbolPattern() {
    var fileName = _fileNames.SYMBOL_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), symbolPattern = pattern; ///
    return symbolPattern;
}
function getOperatorPattern() {
    var fileName = _fileNames.OPERATOR_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), operatorPattern = pattern; ///
    return operatorPattern;
}
var patternMixins = {
    getPattern: getPattern,
    getTypePattern: getTypePattern,
    getSymbolPattern: getSymbolPattern,
    getOperatorPattern: getOperatorPattern
};
var _default = patternMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvcGF0dGVybi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlsZU5hbWVGcm9tRmlsZVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL25hbWVcIjtcbmltcG9ydCB7IFRZUEVfUEFUVEVSTl9GSUxFX05BTUUsIFNZTUJPTF9QQVRURVJOX0ZJTEVfTkFNRSwgT1BFUkFUT1JfUEFUVEVSTl9GSUxFX05BTUUgfSBmcm9tIFwiLi4vZmlsZU5hbWVzXCI7XG5cbmZ1bmN0aW9uIGdldFBhdHRlcm4ocGF0dGVybkZpbGVOYW1lKSB7XG4gIGxldCBwYXR0ZXJuID0gbnVsbDtcblxuICBjb25zdCBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzID0gdGhpcy5nZXRDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzKCksXG4gICAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZSA9IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMuZmluZCgoY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGggPSBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUuZ2V0UGF0aCgpLFxuICAgICAgICAgICAgICBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVOYW1lID0gZmlsZU5hbWVGcm9tRmlsZVBhdGgoY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aCk7XG5cbiAgICAgICAgaWYgKGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZU5hbWUgPT09IHBhdHRlcm5GaWxlTmFtZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KSB8fCBudWxsO1xuXG4gIGlmIChjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVDb250ZW50ID0gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlLmdldENvbnRlbnQoKTtcblxuICAgIHBhdHRlcm4gPSBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVDb250ZW50OyAgLy8vXG4gIH1cblxuICByZXR1cm4gcGF0dGVybjtcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZVBhdHRlcm4oKSB7XG4gIGNvbnN0IGZpbGVOYW1lID0gVFlQRV9QQVRURVJOX0ZJTEVfTkFNRSwgLy8vXG4gICAgICAgIHBhdHRlcm4gPSB0aGlzLmdldFBhdHRlcm4oZmlsZU5hbWUpLFxuICAgICAgICB0eXBlUGF0dGVybiA9IHBhdHRlcm47ICAvLy9cblxuICByZXR1cm4gdHlwZVBhdHRlcm47XG59XG5cbmZ1bmN0aW9uIGdldFN5bWJvbFBhdHRlcm4oKSB7XG4gIGNvbnN0IGZpbGVOYW1lID0gU1lNQk9MX1BBVFRFUk5fRklMRV9OQU1FLCAvLy9cbiAgICAgICAgcGF0dGVybiA9IHRoaXMuZ2V0UGF0dGVybihmaWxlTmFtZSksXG4gICAgICAgIHN5bWJvbFBhdHRlcm4gPSBwYXR0ZXJuOyAgLy8vXG5cbiAgcmV0dXJuIHN5bWJvbFBhdHRlcm47XG59XG5cbmZ1bmN0aW9uIGdldE9wZXJhdG9yUGF0dGVybigpIHtcbiAgY29uc3QgZmlsZU5hbWUgPSBPUEVSQVRPUl9QQVRURVJOX0ZJTEVfTkFNRSwgLy8vXG4gICAgICAgIHBhdHRlcm4gPSB0aGlzLmdldFBhdHRlcm4oZmlsZU5hbWUpLFxuICAgICAgICBvcGVyYXRvclBhdHRlcm4gPSBwYXR0ZXJuOyAgLy8vXG5cbiAgcmV0dXJuIG9wZXJhdG9yUGF0dGVybjtcbn1cblxuY29uc3QgcGF0dGVybk1peGlucyA9ICB7XG4gIGdldFBhdHRlcm4sXG4gIGdldFR5cGVQYXR0ZXJuLFxuICBnZXRTeW1ib2xQYXR0ZXJuLFxuICBnZXRPcGVyYXRvclBhdHRlcm5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhdHRlcm5NaXhpbnM7XG4iXSwibmFtZXMiOlsiZ2V0UGF0dGVybiIsInBhdHRlcm5GaWxlTmFtZSIsInBhdHRlcm4iLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzIiwiZ2V0Q3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcyIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZSIsImZpbmQiLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoIiwiZ2V0UGF0aCIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZU5hbWUiLCJmaWxlTmFtZUZyb21GaWxlUGF0aCIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZUNvbnRlbnQiLCJnZXRDb250ZW50IiwiZ2V0VHlwZVBhdHRlcm4iLCJmaWxlTmFtZSIsIlRZUEVfUEFUVEVSTl9GSUxFX05BTUUiLCJ0eXBlUGF0dGVybiIsImdldFN5bWJvbFBhdHRlcm4iLCJTWU1CT0xfUEFUVEVSTl9GSUxFX05BTUUiLCJzeW1ib2xQYXR0ZXJuIiwiZ2V0T3BlcmF0b3JQYXR0ZXJuIiwiT1BFUkFUT1JfUEFUVEVSTl9GSUxFX05BTUUiLCJvcGVyYXRvclBhdHRlcm4iLCJwYXR0ZXJuTWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkEwREE7OztlQUFBOzs7b0JBeERxQzt5QkFDd0Q7QUFFN0YsU0FBU0EsV0FBV0MsZUFBZSxFQUFFO0lBQ25DLElBQUlDLFVBQVUsSUFBSTtJQUVsQixJQUFNQyw0QkFBNEIsSUFBSSxDQUFDQyw0QkFBNEIsSUFDN0RDLDJCQUEyQkYsMEJBQTBCRyxJQUFJLENBQUMsU0FBQ0QsMEJBQTZCO1FBQ3hGLElBQU1FLCtCQUErQkYseUJBQXlCRyxPQUFPLElBQy9EQywrQkFBK0JDLElBQUFBLDBCQUFvQixFQUFDSDtRQUUxRCxJQUFJRSxpQ0FBaUNSLGlCQUFpQjtZQUNwRCxPQUFPLElBQUk7UUFDYixDQUFDO0lBQ0gsTUFBTSxJQUFJO0lBRWQsSUFBSUksNkJBQTZCLElBQUksRUFBRTtRQUNyQyxJQUFNTSxrQ0FBa0NOLHlCQUF5Qk8sVUFBVTtRQUUzRVYsVUFBVVMsaUNBQWtDLEdBQUc7SUFDakQsQ0FBQztJQUVELE9BQU9UO0FBQ1Q7QUFFQSxTQUFTVyxpQkFBaUI7SUFDeEIsSUFBTUMsV0FBV0MsaUNBQXNCLEVBQ2pDYixVQUFVLElBQUksQ0FBQ0YsVUFBVSxDQUFDYyxXQUMxQkUsY0FBY2QsU0FBVSxHQUFHO0lBRWpDLE9BQU9jO0FBQ1Q7QUFFQSxTQUFTQyxtQkFBbUI7SUFDMUIsSUFBTUgsV0FBV0ksbUNBQXdCLEVBQ25DaEIsVUFBVSxJQUFJLENBQUNGLFVBQVUsQ0FBQ2MsV0FDMUJLLGdCQUFnQmpCLFNBQVUsR0FBRztJQUVuQyxPQUFPaUI7QUFDVDtBQUVBLFNBQVNDLHFCQUFxQjtJQUM1QixJQUFNTixXQUFXTyxxQ0FBMEIsRUFDckNuQixVQUFVLElBQUksQ0FBQ0YsVUFBVSxDQUFDYyxXQUMxQlEsa0JBQWtCcEIsU0FBVSxHQUFHO0lBRXJDLE9BQU9vQjtBQUNUO0FBRUEsSUFBTUMsZ0JBQWlCO0lBQ3JCdkIsWUFBQUE7SUFDQWEsZ0JBQUFBO0lBQ0FJLGtCQUFBQTtJQUNBRyxvQkFBQUE7QUFDRjtJQUVBLFdBQWVHIn0=