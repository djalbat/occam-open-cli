'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var necessary = require('necessary');

var Project = require('./project'),
    pathUtilities = require('./utilities/path');

var path = necessary.path,
    fileSystem = necessary.fileSystem,
    concatenatePaths = path.concatenatePaths,
    isNameHiddenName = pathUtilities.isNameHiddenName,
    isEntryDirectory = fileSystem.isEntryDirectory,
    readDirectory = fileSystem.readDirectory;

var Projects = function () {
  function Projects() {
    _classCallCheck(this, Projects);

    this.array = [];
  }

  _createClass(Projects, [{
    key: 'addProject',
    value: function addProject(project) {
      this.array.push(project);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var json = this.array.map(function (project) {
        var projectJSON = project.toJSON();

        return projectJSON;
      });

      return json;
    }
  }], [{
    key: 'fromProjectsDirectoryPath',
    value: function fromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories) {
      var projects = new Projects(),
          topmostDirectoryNames = topmostDirectoryNamesFromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories);

      topmostDirectoryNames.forEach(function (topmostDirectoryName) {
        var project = Project.fromTopmostDirectoryName(topmostDirectoryName, projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories);

        projects.addProject(project);
      });

      return projects;
    }
  }]);

  return Projects;
}();

module.exports = Projects;

function topmostDirectoryNamesFromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories) {
  var topmostDirectoryNames = void 0;

  try {
    var subEntryNames = readDirectory(projectsDirectoryPath);

    topmostDirectoryNames = subEntryNames.reduce(function (topmostDirectoryNames, subEntryName) {
      var absoluteSubEntryPath = concatenatePaths(projectsDirectoryPath, subEntryName),
          subEntryNameHiddenName = isNameHiddenName(subEntryName);

      if (!subEntryNameHiddenName || !doNotLoadHiddenFilesAndDirectories) {
        var subEntryDirectory = isEntryDirectory(absoluteSubEntryPath);

        if (subEntryDirectory) {
          var topmostDirectoryName = subEntryName; ///

          topmostDirectoryNames.push(topmostDirectoryName);
        }
      }

      return topmostDirectoryNames;
    }, []);
  } catch (error) {
    topmostDirectoryNames = [];
  }

  return topmostDirectoryNames;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9wcm9qZWN0cy5qcyJdLCJuYW1lcyI6WyJuZWNlc3NhcnkiLCJyZXF1aXJlIiwiUHJvamVjdCIsInBhdGhVdGlsaXRpZXMiLCJwYXRoIiwiZmlsZVN5c3RlbSIsImNvbmNhdGVuYXRlUGF0aHMiLCJpc05hbWVIaWRkZW5OYW1lIiwiaXNFbnRyeURpcmVjdG9yeSIsInJlYWREaXJlY3RvcnkiLCJQcm9qZWN0cyIsImFycmF5IiwicHJvamVjdCIsInB1c2giLCJqc29uIiwibWFwIiwicHJvamVjdEpTT04iLCJ0b0pTT04iLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJkb05vdExvYWRIaWRkZW5GaWxlc0FuZERpcmVjdG9yaWVzIiwicHJvamVjdHMiLCJ0b3Btb3N0RGlyZWN0b3J5TmFtZXMiLCJ0b3Btb3N0RGlyZWN0b3J5TmFtZXNGcm9tUHJvamVjdHNEaXJlY3RvcnlQYXRoIiwiZm9yRWFjaCIsInRvcG1vc3REaXJlY3RvcnlOYW1lIiwiZnJvbVRvcG1vc3REaXJlY3RvcnlOYW1lIiwiYWRkUHJvamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdWJFbnRyeU5hbWVzIiwicmVkdWNlIiwic3ViRW50cnlOYW1lIiwiYWJzb2x1dGVTdWJFbnRyeVBhdGgiLCJzdWJFbnRyeU5hbWVIaWRkZW5OYW1lIiwic3ViRW50cnlEaXJlY3RvcnkiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxVQUFVRCxRQUFRLFdBQVIsQ0FBaEI7QUFBQSxJQUNNRSxnQkFBZ0JGLFFBQVEsa0JBQVIsQ0FEdEI7O0lBR1FHLEksR0FBcUJKLFMsQ0FBckJJLEk7SUFBTUMsVSxHQUFlTCxTLENBQWZLLFU7SUFDTkMsZ0IsR0FBcUJGLEksQ0FBckJFLGdCO0lBQ0FDLGdCLEdBQXFCSixhLENBQXJCSSxnQjtJQUNBQyxnQixHQUFvQ0gsVSxDQUFwQ0csZ0I7SUFBa0JDLGEsR0FBa0JKLFUsQ0FBbEJJLGE7O0lBRXBCQyxRO0FBQ0osc0JBQWM7QUFBQTs7QUFDWixTQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNEOzs7OytCQUVVQyxPLEVBQVM7QUFDbEIsV0FBS0QsS0FBTCxDQUFXRSxJQUFYLENBQWdCRCxPQUFoQjtBQUNEOzs7NkJBRVE7QUFDUCxVQUFNRSxPQUFPLEtBQUtILEtBQUwsQ0FBV0ksR0FBWCxDQUFlLFVBQVNILE9BQVQsRUFBa0I7QUFDNUMsWUFBTUksY0FBY0osUUFBUUssTUFBUixFQUFwQjs7QUFFQSxlQUFPRCxXQUFQO0FBQ0QsT0FKWSxDQUFiOztBQU1BLGFBQU9GLElBQVA7QUFDRDs7OzhDQUVnQ0kscUIsRUFBdUJDLGtDLEVBQW9DO0FBQzFGLFVBQU1DLFdBQVcsSUFBSVYsUUFBSixFQUFqQjtBQUFBLFVBQ01XLHdCQUF3QkMsK0NBQStDSixxQkFBL0MsRUFBc0VDLGtDQUF0RSxDQUQ5Qjs7QUFHQUUsNEJBQXNCRSxPQUF0QixDQUE4QixVQUFTQyxvQkFBVCxFQUErQjtBQUMzRCxZQUFNWixVQUFVVixRQUFRdUIsd0JBQVIsQ0FBaUNELG9CQUFqQyxFQUF1RE4scUJBQXZELEVBQThFQyxrQ0FBOUUsQ0FBaEI7O0FBRUFDLGlCQUFTTSxVQUFULENBQW9CZCxPQUFwQjtBQUNELE9BSkQ7O0FBTUEsYUFBT1EsUUFBUDtBQUNEOzs7Ozs7QUFHSE8sT0FBT0MsT0FBUCxHQUFpQmxCLFFBQWpCOztBQUVBLFNBQVNZLDhDQUFULENBQXdESixxQkFBeEQsRUFBK0VDLGtDQUEvRSxFQUFtSDtBQUNqSCxNQUFJRSw4QkFBSjs7QUFFQSxNQUFJO0FBQ0YsUUFBTVEsZ0JBQWdCcEIsY0FBY1MscUJBQWQsQ0FBdEI7O0FBRUFHLDRCQUF3QlEsY0FBY0MsTUFBZCxDQUFxQixVQUFVVCxxQkFBVixFQUFpQ1UsWUFBakMsRUFBK0M7QUFDMUYsVUFBTUMsdUJBQXVCMUIsaUJBQWlCWSxxQkFBakIsRUFBd0NhLFlBQXhDLENBQTdCO0FBQUEsVUFDTUUseUJBQXlCMUIsaUJBQWlCd0IsWUFBakIsQ0FEL0I7O0FBR0EsVUFBSSxDQUFDRSxzQkFBRCxJQUEyQixDQUFDZCxrQ0FBaEMsRUFBb0U7QUFDbEUsWUFBTWUsb0JBQW9CMUIsaUJBQWlCd0Isb0JBQWpCLENBQTFCOztBQUVBLFlBQUlFLGlCQUFKLEVBQXVCO0FBQ3JCLGNBQU1WLHVCQUF1Qk8sWUFBN0IsQ0FEcUIsQ0FDdUI7O0FBRTVDVixnQ0FBc0JSLElBQXRCLENBQTJCVyxvQkFBM0I7QUFDRDtBQUNGOztBQUVELGFBQU9ILHFCQUFQO0FBQ0QsS0FmdUIsRUFlckIsRUFmcUIsQ0FBeEI7QUFnQkQsR0FuQkQsQ0FtQkUsT0FBT2MsS0FBUCxFQUFjO0FBQ2RkLDRCQUF3QixFQUF4QjtBQUNEOztBQUVELFNBQU9BLHFCQUFQO0FBQ0QiLCJmaWxlIjoicHJvamVjdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBQcm9qZWN0ID0gcmVxdWlyZSgnLi9wcm9qZWN0JyksXG4gICAgICBwYXRoVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcGF0aCcpO1xuXG5jb25zdCB7IHBhdGgsIGZpbGVTeXN0ZW0gfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aCxcbiAgICAgIHsgaXNOYW1lSGlkZGVuTmFtZSB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgaXNFbnRyeURpcmVjdG9yeSwgcmVhZERpcmVjdG9yeSB9ID0gZmlsZVN5c3RlbTtcblxuY2xhc3MgUHJvamVjdHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmFycmF5ID0gW107XG4gIH1cblxuICBhZGRQcm9qZWN0KHByb2plY3QpIHtcbiAgICB0aGlzLmFycmF5LnB1c2gocHJvamVjdCk7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgY29uc3QganNvbiA9IHRoaXMuYXJyYXkubWFwKGZ1bmN0aW9uKHByb2plY3QpIHtcbiAgICAgIGNvbnN0IHByb2plY3RKU09OID0gcHJvamVjdC50b0pTT04oKTtcblxuICAgICAgcmV0dXJuIHByb2plY3RKU09OO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBzdGF0aWMgZnJvbVByb2plY3RzRGlyZWN0b3J5UGF0aChwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGRvTm90TG9hZEhpZGRlbkZpbGVzQW5kRGlyZWN0b3JpZXMpIHtcbiAgICBjb25zdCBwcm9qZWN0cyA9IG5ldyBQcm9qZWN0cygpLFxuICAgICAgICAgIHRvcG1vc3REaXJlY3RvcnlOYW1lcyA9IHRvcG1vc3REaXJlY3RvcnlOYW1lc0Zyb21Qcm9qZWN0c0RpcmVjdG9yeVBhdGgocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBkb05vdExvYWRIaWRkZW5GaWxlc0FuZERpcmVjdG9yaWVzKTtcblxuICAgIHRvcG1vc3REaXJlY3RvcnlOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKHRvcG1vc3REaXJlY3RvcnlOYW1lKSB7XG4gICAgICBjb25zdCBwcm9qZWN0ID0gUHJvamVjdC5mcm9tVG9wbW9zdERpcmVjdG9yeU5hbWUodG9wbW9zdERpcmVjdG9yeU5hbWUsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgZG9Ob3RMb2FkSGlkZGVuRmlsZXNBbmREaXJlY3Rvcmllcyk7XG5cbiAgICAgIHByb2plY3RzLmFkZFByb2plY3QocHJvamVjdCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJvamVjdHM7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9qZWN0cztcblxuZnVuY3Rpb24gdG9wbW9zdERpcmVjdG9yeU5hbWVzRnJvbVByb2plY3RzRGlyZWN0b3J5UGF0aChwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGRvTm90TG9hZEhpZGRlbkZpbGVzQW5kRGlyZWN0b3JpZXMpIHtcbiAgbGV0IHRvcG1vc3REaXJlY3RvcnlOYW1lcztcblxuICB0cnkge1xuICAgIGNvbnN0IHN1YkVudHJ5TmFtZXMgPSByZWFkRGlyZWN0b3J5KHByb2plY3RzRGlyZWN0b3J5UGF0aCk7XG5cbiAgICB0b3Btb3N0RGlyZWN0b3J5TmFtZXMgPSBzdWJFbnRyeU5hbWVzLnJlZHVjZShmdW5jdGlvbiAodG9wbW9zdERpcmVjdG9yeU5hbWVzLCBzdWJFbnRyeU5hbWUpIHtcbiAgICAgIGNvbnN0IGFic29sdXRlU3ViRW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHN1YkVudHJ5TmFtZSksXG4gICAgICAgICAgICBzdWJFbnRyeU5hbWVIaWRkZW5OYW1lID0gaXNOYW1lSGlkZGVuTmFtZShzdWJFbnRyeU5hbWUpO1xuXG4gICAgICBpZiAoIXN1YkVudHJ5TmFtZUhpZGRlbk5hbWUgfHwgIWRvTm90TG9hZEhpZGRlbkZpbGVzQW5kRGlyZWN0b3JpZXMpIHtcbiAgICAgICAgY29uc3Qgc3ViRW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlU3ViRW50cnlQYXRoKTtcblxuICAgICAgICBpZiAoc3ViRW50cnlEaXJlY3RvcnkpIHtcbiAgICAgICAgICBjb25zdCB0b3Btb3N0RGlyZWN0b3J5TmFtZSA9IHN1YkVudHJ5TmFtZTsgIC8vL1xuXG4gICAgICAgICAgdG9wbW9zdERpcmVjdG9yeU5hbWVzLnB1c2godG9wbW9zdERpcmVjdG9yeU5hbWUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRvcG1vc3REaXJlY3RvcnlOYW1lcztcbiAgICB9LCBbXSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdG9wbW9zdERpcmVjdG9yeU5hbWVzID0gW107XG4gIH1cblxuICByZXR1cm4gdG9wbW9zdERpcmVjdG9yeU5hbWVzO1xufVxuIl19