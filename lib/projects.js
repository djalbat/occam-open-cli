'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var necessary = require('necessary');

var Project = require('./project'),
    pathUtilities = require('./utilities/path');

var path = necessary.path,
    fileSystem = necessary.fileSystem,
    concatenatePaths = path.concatenatePaths,
    isEntryDirectory = fileSystem.isEntryDirectory,
    readDirectory = fileSystem.readDirectory;

var Projects = function () {
  function Projects() {
    _classCallCheck(this, Projects);

    this.array = [];
  }

  _createClass(Projects, [{
    key: 'addProject',
    value: function addProject(project) {
      this.array.push(project);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var json = this.array.map(function (project) {
        var projectJSON = project.toJSON();

        return projectJSON;
      });

      return json;
    }
  }], [{
    key: 'fromProjectsDirectoryPath',
    value: function fromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories) {
      var projects = new Projects(),
          topmostDirectoryNames = topmostDirectoryNamesFromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories);

      topmostDirectoryNames.forEach(function (topmostDirectoryName) {
        var project = Project.fromTopmostDirectoryName(topmostDirectoryName, projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories);

        projects.addProject(project);
      });

      return projects;
    }
  }]);

  return Projects;
}();

module.exports = Projects;

function topmostDirectoryNamesFromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories) {
  var topmostDirectoryNames = void 0;

  try {
    var subEntryNames = readDirectory(projectsDirectoryPath);

    topmostDirectoryNames = subEntryNames.reduce(function (topmostDirectoryNames, subEntryName) {
      var absoluteSubEntryPath = concatenatePaths(projectsDirectoryPath, subEntryName),
          subEntryNameHiddenName = pathUtilities.isNameHiddenName(subEntryName);

      if (!subEntryNameHiddenName || !doNotLoadHiddenFilesAndDirectories) {
        var subEntryDirectory = isEntryDirectory(absoluteSubEntryPath);

        if (subEntryDirectory) {
          var topmostDirectoryName = subEntryName; ///

          topmostDirectoryNames.push(topmostDirectoryName);
        }
      }

      return topmostDirectoryNames;
    }, []);
  } catch (error) {
    topmostDirectoryNames = [];
  }

  return topmostDirectoryNames;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9wcm9qZWN0cy5qcyJdLCJuYW1lcyI6WyJuZWNlc3NhcnkiLCJyZXF1aXJlIiwiUHJvamVjdCIsInBhdGhVdGlsaXRpZXMiLCJwYXRoIiwiZmlsZVN5c3RlbSIsImNvbmNhdGVuYXRlUGF0aHMiLCJpc0VudHJ5RGlyZWN0b3J5IiwicmVhZERpcmVjdG9yeSIsIlByb2plY3RzIiwiYXJyYXkiLCJwcm9qZWN0IiwicHVzaCIsImpzb24iLCJtYXAiLCJwcm9qZWN0SlNPTiIsInRvSlNPTiIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImRvTm90TG9hZEhpZGRlbkZpbGVzQW5kRGlyZWN0b3JpZXMiLCJwcm9qZWN0cyIsInRvcG1vc3REaXJlY3RvcnlOYW1lcyIsInRvcG1vc3REaXJlY3RvcnlOYW1lc0Zyb21Qcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJmb3JFYWNoIiwidG9wbW9zdERpcmVjdG9yeU5hbWUiLCJmcm9tVG9wbW9zdERpcmVjdG9yeU5hbWUiLCJhZGRQcm9qZWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsInN1YkVudHJ5TmFtZXMiLCJyZWR1Y2UiLCJzdWJFbnRyeU5hbWUiLCJhYnNvbHV0ZVN1YkVudHJ5UGF0aCIsInN1YkVudHJ5TmFtZUhpZGRlbk5hbWUiLCJpc05hbWVIaWRkZW5OYW1lIiwic3ViRW50cnlEaXJlY3RvcnkiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxVQUFVRCxRQUFRLFdBQVIsQ0FBaEI7QUFBQSxJQUNNRSxnQkFBZ0JGLFFBQVEsa0JBQVIsQ0FEdEI7O0lBR1FHLEksR0FBcUJKLFMsQ0FBckJJLEk7SUFBTUMsVSxHQUFlTCxTLENBQWZLLFU7SUFDTkMsZ0IsR0FBcUJGLEksQ0FBckJFLGdCO0lBQ0FDLGdCLEdBQW9DRixVLENBQXBDRSxnQjtJQUFrQkMsYSxHQUFrQkgsVSxDQUFsQkcsYTs7SUFFcEJDLFE7QUFDSixzQkFBYztBQUFBOztBQUNaLFNBQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0Q7Ozs7K0JBRVVDLE8sRUFBUztBQUNsQixXQUFLRCxLQUFMLENBQVdFLElBQVgsQ0FBZ0JELE9BQWhCO0FBQ0Q7Ozs2QkFFUTtBQUNQLFVBQU1FLE9BQU8sS0FBS0gsS0FBTCxDQUFXSSxHQUFYLENBQWUsVUFBU0gsT0FBVCxFQUFrQjtBQUM1QyxZQUFNSSxjQUFjSixRQUFRSyxNQUFSLEVBQXBCOztBQUVBLGVBQU9ELFdBQVA7QUFDRCxPQUpZLENBQWI7O0FBTUEsYUFBT0YsSUFBUDtBQUNEOzs7OENBRWdDSSxxQixFQUF1QkMsa0MsRUFBb0M7QUFDMUYsVUFBTUMsV0FBVyxJQUFJVixRQUFKLEVBQWpCO0FBQUEsVUFDTVcsd0JBQXdCQywrQ0FBK0NKLHFCQUEvQyxFQUFzRUMsa0NBQXRFLENBRDlCOztBQUdBRSw0QkFBc0JFLE9BQXRCLENBQThCLFVBQVNDLG9CQUFULEVBQStCO0FBQzNELFlBQU1aLFVBQVVULFFBQVFzQix3QkFBUixDQUFpQ0Qsb0JBQWpDLEVBQXVETixxQkFBdkQsRUFBOEVDLGtDQUE5RSxDQUFoQjs7QUFFQUMsaUJBQVNNLFVBQVQsQ0FBb0JkLE9BQXBCO0FBQ0QsT0FKRDs7QUFNQSxhQUFPUSxRQUFQO0FBQ0Q7Ozs7OztBQUdITyxPQUFPQyxPQUFQLEdBQWlCbEIsUUFBakI7O0FBRUEsU0FBU1ksOENBQVQsQ0FBd0RKLHFCQUF4RCxFQUErRUMsa0NBQS9FLEVBQW1IO0FBQ2pILE1BQUlFLDhCQUFKOztBQUVBLE1BQUk7QUFDRixRQUFNUSxnQkFBZ0JwQixjQUFjUyxxQkFBZCxDQUF0Qjs7QUFFQUcsNEJBQXdCUSxjQUFjQyxNQUFkLENBQXFCLFVBQVVULHFCQUFWLEVBQWlDVSxZQUFqQyxFQUErQztBQUMxRixVQUFNQyx1QkFBdUJ6QixpQkFBaUJXLHFCQUFqQixFQUF3Q2EsWUFBeEMsQ0FBN0I7QUFBQSxVQUNNRSx5QkFBeUI3QixjQUFjOEIsZ0JBQWQsQ0FBK0JILFlBQS9CLENBRC9COztBQUdBLFVBQUksQ0FBQ0Usc0JBQUQsSUFBMkIsQ0FBQ2Qsa0NBQWhDLEVBQW9FO0FBQ2xFLFlBQU1nQixvQkFBb0IzQixpQkFBaUJ3QixvQkFBakIsQ0FBMUI7O0FBRUEsWUFBSUcsaUJBQUosRUFBdUI7QUFDckIsY0FBTVgsdUJBQXVCTyxZQUE3QixDQURxQixDQUN1Qjs7QUFFNUNWLGdDQUFzQlIsSUFBdEIsQ0FBMkJXLG9CQUEzQjtBQUNEO0FBQ0Y7O0FBRUQsYUFBT0gscUJBQVA7QUFDRCxLQWZ1QixFQWVyQixFQWZxQixDQUF4QjtBQWdCRCxHQW5CRCxDQW1CRSxPQUFPZSxLQUFQLEVBQWM7QUFDZGYsNEJBQXdCLEVBQXhCO0FBQ0Q7O0FBRUQsU0FBT0EscUJBQVA7QUFDRCIsImZpbGUiOiJwcm9qZWN0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IFByb2plY3QgPSByZXF1aXJlKCcuL3Byb2plY3QnKSxcbiAgICAgIHBhdGhVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9wYXRoJyk7XG5cbmNvbnN0IHsgcGF0aCwgZmlsZVN5c3RlbSB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoLFxuICAgICAgeyBpc0VudHJ5RGlyZWN0b3J5LCByZWFkRGlyZWN0b3J5IH0gPSBmaWxlU3lzdGVtO1xuXG5jbGFzcyBQcm9qZWN0cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgfVxuXG4gIGFkZFByb2plY3QocHJvamVjdCkge1xuICAgIHRoaXMuYXJyYXkucHVzaChwcm9qZWN0KTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBqc29uID0gdGhpcy5hcnJheS5tYXAoZnVuY3Rpb24ocHJvamVjdCkge1xuICAgICAgY29uc3QgcHJvamVjdEpTT04gPSBwcm9qZWN0LnRvSlNPTigpO1xuXG4gICAgICByZXR1cm4gcHJvamVjdEpTT047XG4gICAgfSk7XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tUHJvamVjdHNEaXJlY3RvcnlQYXRoKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgZG9Ob3RMb2FkSGlkZGVuRmlsZXNBbmREaXJlY3Rvcmllcykge1xuICAgIGNvbnN0IHByb2plY3RzID0gbmV3IFByb2plY3RzKCksXG4gICAgICAgICAgdG9wbW9zdERpcmVjdG9yeU5hbWVzID0gdG9wbW9zdERpcmVjdG9yeU5hbWVzRnJvbVByb2plY3RzRGlyZWN0b3J5UGF0aChwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGRvTm90TG9hZEhpZGRlbkZpbGVzQW5kRGlyZWN0b3JpZXMpO1xuXG4gICAgdG9wbW9zdERpcmVjdG9yeU5hbWVzLmZvckVhY2goZnVuY3Rpb24odG9wbW9zdERpcmVjdG9yeU5hbWUpIHtcbiAgICAgIGNvbnN0IHByb2plY3QgPSBQcm9qZWN0LmZyb21Ub3Btb3N0RGlyZWN0b3J5TmFtZSh0b3Btb3N0RGlyZWN0b3J5TmFtZSwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBkb05vdExvYWRIaWRkZW5GaWxlc0FuZERpcmVjdG9yaWVzKTtcblxuICAgICAgcHJvamVjdHMuYWRkUHJvamVjdChwcm9qZWN0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9qZWN0cztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2plY3RzO1xuXG5mdW5jdGlvbiB0b3Btb3N0RGlyZWN0b3J5TmFtZXNGcm9tUHJvamVjdHNEaXJlY3RvcnlQYXRoKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgZG9Ob3RMb2FkSGlkZGVuRmlsZXNBbmREaXJlY3Rvcmllcykge1xuICBsZXQgdG9wbW9zdERpcmVjdG9yeU5hbWVzO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IHJlYWREaXJlY3RvcnkocHJvamVjdHNEaXJlY3RvcnlQYXRoKTtcblxuICAgIHRvcG1vc3REaXJlY3RvcnlOYW1lcyA9IHN1YkVudHJ5TmFtZXMucmVkdWNlKGZ1bmN0aW9uICh0b3Btb3N0RGlyZWN0b3J5TmFtZXMsIHN1YkVudHJ5TmFtZSkge1xuICAgICAgY29uc3QgYWJzb2x1dGVTdWJFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc3ViRW50cnlOYW1lKSxcbiAgICAgICAgICAgIHN1YkVudHJ5TmFtZUhpZGRlbk5hbWUgPSBwYXRoVXRpbGl0aWVzLmlzTmFtZUhpZGRlbk5hbWUoc3ViRW50cnlOYW1lKTtcblxuICAgICAgaWYgKCFzdWJFbnRyeU5hbWVIaWRkZW5OYW1lIHx8ICFkb05vdExvYWRIaWRkZW5GaWxlc0FuZERpcmVjdG9yaWVzKSB7XG4gICAgICAgIGNvbnN0IHN1YkVudHJ5RGlyZWN0b3J5ID0gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVN1YkVudHJ5UGF0aCk7XG5cbiAgICAgICAgaWYgKHN1YkVudHJ5RGlyZWN0b3J5KSB7XG4gICAgICAgICAgY29uc3QgdG9wbW9zdERpcmVjdG9yeU5hbWUgPSBzdWJFbnRyeU5hbWU7ICAvLy9cblxuICAgICAgICAgIHRvcG1vc3REaXJlY3RvcnlOYW1lcy5wdXNoKHRvcG1vc3REaXJlY3RvcnlOYW1lKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b3Btb3N0RGlyZWN0b3J5TmFtZXM7XG4gICAgfSwgW10pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRvcG1vc3REaXJlY3RvcnlOYW1lcyA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIHRvcG1vc3REaXJlY3RvcnlOYW1lcztcbn1cbiJdfQ==