'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Project = require('./project'),
    pathUtil = require('./util/path');

var Projects = function () {
  function Projects() {
    _classCallCheck(this, Projects);

    this.array = [];
  }

  _createClass(Projects, [{
    key: 'addProject',
    value: function addProject(project) {
      this.array.push(project);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var json = this.array.map(function (project) {
        var projectJSON = project.toJSON();

        return projectJSON;
      });

      return json;
    }
  }], [{
    key: 'fromProjectsDirectoryPath',
    value: function fromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories) {
      var projects = new Projects(),
          rootDirectoryNames = rootDirectoryNamesFromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories);

      rootDirectoryNames.forEach(function (rootDirectoryName) {
        var project = Project.fromRootDirectoryName(rootDirectoryName, projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories);

        projects.addProject(project);
      });

      return projects;
    }
  }]);

  return Projects;
}();

module.exports = Projects;

function rootDirectoryNamesFromProjectsDirectoryPath(projectsDirectoryPath, doNotLoadHiddenFilesAndDirectories) {
  var subEntryNames = pathUtil.subEntryNamesFromAbsoluteDirectoryPath(projectsDirectoryPath),
      rootDirectoryNames = subEntryNames.reduce(function (rootDirectoryNames, subEntryName) {
    var absoluteSubEntryPath = pathUtil.combinePaths(projectsDirectoryPath, subEntryName),
        absoluteSubEntryPathHiddenPath = pathUtil.isAbsolutePathHiddenPath(absoluteSubEntryPath);

    if (!absoluteSubEntryPathHiddenPath || !doNotLoadHiddenFilesAndDirectories) {
      var absoluteSubEntryPathDirectoryPath = pathUtil.isAbsolutePathDirectoryPath(absoluteSubEntryPath),
          subEntryDirectory = absoluteSubEntryPathDirectoryPath; ///

      if (subEntryDirectory) {
        var rootDirectoryName = subEntryName; ///

        rootDirectoryNames.push(rootDirectoryName);
      }
    }

    return rootDirectoryNames;
  }, []);

  return rootDirectoryNames;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9wcm9qZWN0cy5qcyJdLCJuYW1lcyI6WyJQcm9qZWN0IiwicmVxdWlyZSIsInBhdGhVdGlsIiwiUHJvamVjdHMiLCJhcnJheSIsInByb2plY3QiLCJwdXNoIiwianNvbiIsIm1hcCIsInByb2plY3RKU09OIiwidG9KU09OIiwicHJvamVjdHNEaXJlY3RvcnlQYXRoIiwiZG9Ob3RMb2FkSGlkZGVuRmlsZXNBbmREaXJlY3RvcmllcyIsInByb2plY3RzIiwicm9vdERpcmVjdG9yeU5hbWVzIiwicm9vdERpcmVjdG9yeU5hbWVzRnJvbVByb2plY3RzRGlyZWN0b3J5UGF0aCIsImZvckVhY2giLCJyb290RGlyZWN0b3J5TmFtZSIsImZyb21Sb290RGlyZWN0b3J5TmFtZSIsImFkZFByb2plY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwic3ViRW50cnlOYW1lcyIsInN1YkVudHJ5TmFtZXNGcm9tQWJzb2x1dGVEaXJlY3RvcnlQYXRoIiwicmVkdWNlIiwic3ViRW50cnlOYW1lIiwiYWJzb2x1dGVTdWJFbnRyeVBhdGgiLCJjb21iaW5lUGF0aHMiLCJhYnNvbHV0ZVN1YkVudHJ5UGF0aEhpZGRlblBhdGgiLCJpc0Fic29sdXRlUGF0aEhpZGRlblBhdGgiLCJhYnNvbHV0ZVN1YkVudHJ5UGF0aERpcmVjdG9yeVBhdGgiLCJpc0Fic29sdXRlUGF0aERpcmVjdG9yeVBhdGgiLCJzdWJFbnRyeURpcmVjdG9yeSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLFVBQVVDLFFBQVEsV0FBUixDQUFoQjtBQUFBLElBQ01DLFdBQVdELFFBQVEsYUFBUixDQURqQjs7SUFHTUUsUTtBQUNKLHNCQUFjO0FBQUE7O0FBQ1osU0FBS0MsS0FBTCxHQUFhLEVBQWI7QUFDRDs7OzsrQkFFVUMsTyxFQUFTO0FBQ2xCLFdBQUtELEtBQUwsQ0FBV0UsSUFBWCxDQUFnQkQsT0FBaEI7QUFDRDs7OzZCQUVRO0FBQ1AsVUFBTUUsT0FBTyxLQUFLSCxLQUFMLENBQVdJLEdBQVgsQ0FBZSxVQUFTSCxPQUFULEVBQWtCO0FBQzVDLFlBQU1JLGNBQWNKLFFBQVFLLE1BQVIsRUFBcEI7O0FBRUEsZUFBT0QsV0FBUDtBQUNELE9BSlksQ0FBYjs7QUFNQSxhQUFPRixJQUFQO0FBQ0Q7Ozs4Q0FFZ0NJLHFCLEVBQXVCQyxrQyxFQUFvQztBQUMxRixVQUFNQyxXQUFXLElBQUlWLFFBQUosRUFBakI7QUFBQSxVQUNNVyxxQkFBcUJDLDRDQUE0Q0oscUJBQTVDLEVBQW1FQyxrQ0FBbkUsQ0FEM0I7O0FBR0FFLHlCQUFtQkUsT0FBbkIsQ0FBMkIsVUFBU0MsaUJBQVQsRUFBNEI7QUFDckQsWUFBTVosVUFBVUwsUUFBUWtCLHFCQUFSLENBQThCRCxpQkFBOUIsRUFBaUROLHFCQUFqRCxFQUF3RUMsa0NBQXhFLENBQWhCOztBQUVBQyxpQkFBU00sVUFBVCxDQUFvQmQsT0FBcEI7QUFDRCxPQUpEOztBQU1BLGFBQU9RLFFBQVA7QUFDRDs7Ozs7O0FBR0hPLE9BQU9DLE9BQVAsR0FBaUJsQixRQUFqQjs7QUFFQSxTQUFTWSwyQ0FBVCxDQUFxREoscUJBQXJELEVBQTRFQyxrQ0FBNUUsRUFBZ0g7QUFDOUcsTUFBTVUsZ0JBQWdCcEIsU0FBU3FCLHNDQUFULENBQWdEWixxQkFBaEQsQ0FBdEI7QUFBQSxNQUNNRyxxQkFBcUJRLGNBQWNFLE1BQWQsQ0FBcUIsVUFBU1Ysa0JBQVQsRUFBNkJXLFlBQTdCLEVBQTJDO0FBQ25GLFFBQU1DLHVCQUF1QnhCLFNBQVN5QixZQUFULENBQXNCaEIscUJBQXRCLEVBQTZDYyxZQUE3QyxDQUE3QjtBQUFBLFFBQ01HLGlDQUFpQzFCLFNBQVMyQix3QkFBVCxDQUFrQ0gsb0JBQWxDLENBRHZDOztBQUdBLFFBQUksQ0FBQ0UsOEJBQUQsSUFBbUMsQ0FBQ2hCLGtDQUF4QyxFQUE0RTtBQUMxRSxVQUFNa0Isb0NBQW9DNUIsU0FBUzZCLDJCQUFULENBQXFDTCxvQkFBckMsQ0FBMUM7QUFBQSxVQUNNTSxvQkFBb0JGLGlDQUQxQixDQUQwRSxDQUVaOztBQUU5RCxVQUFJRSxpQkFBSixFQUF1QjtBQUNyQixZQUFNZixvQkFBb0JRLFlBQTFCLENBRHFCLENBQ29COztBQUV6Q1gsMkJBQW1CUixJQUFuQixDQUF3QlcsaUJBQXhCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPSCxrQkFBUDtBQUNELEdBaEJvQixFQWdCbEIsRUFoQmtCLENBRDNCOztBQW1CQSxTQUFPQSxrQkFBUDtBQUNEIiwiZmlsZSI6InByb2plY3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQcm9qZWN0ID0gcmVxdWlyZSgnLi9wcm9qZWN0JyksXG4gICAgICBwYXRoVXRpbCA9IHJlcXVpcmUoJy4vdXRpbC9wYXRoJyk7XG5cbmNsYXNzIFByb2plY3RzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hcnJheSA9IFtdO1xuICB9XG5cbiAgYWRkUHJvamVjdChwcm9qZWN0KSB7XG4gICAgdGhpcy5hcnJheS5wdXNoKHByb2plY3QpO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSB0aGlzLmFycmF5Lm1hcChmdW5jdGlvbihwcm9qZWN0KSB7XG4gICAgICBjb25zdCBwcm9qZWN0SlNPTiA9IHByb2plY3QudG9KU09OKCk7XG5cbiAgICAgIHJldHVybiBwcm9qZWN0SlNPTjtcbiAgICB9KTtcblxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgc3RhdGljIGZyb21Qcm9qZWN0c0RpcmVjdG9yeVBhdGgocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBkb05vdExvYWRIaWRkZW5GaWxlc0FuZERpcmVjdG9yaWVzKSB7XG4gICAgY29uc3QgcHJvamVjdHMgPSBuZXcgUHJvamVjdHMoKSxcbiAgICAgICAgICByb290RGlyZWN0b3J5TmFtZXMgPSByb290RGlyZWN0b3J5TmFtZXNGcm9tUHJvamVjdHNEaXJlY3RvcnlQYXRoKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgZG9Ob3RMb2FkSGlkZGVuRmlsZXNBbmREaXJlY3Rvcmllcyk7XG5cbiAgICByb290RGlyZWN0b3J5TmFtZXMuZm9yRWFjaChmdW5jdGlvbihyb290RGlyZWN0b3J5TmFtZSkge1xuICAgICAgY29uc3QgcHJvamVjdCA9IFByb2plY3QuZnJvbVJvb3REaXJlY3RvcnlOYW1lKHJvb3REaXJlY3RvcnlOYW1lLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGRvTm90TG9hZEhpZGRlbkZpbGVzQW5kRGlyZWN0b3JpZXMpO1xuXG4gICAgICBwcm9qZWN0cy5hZGRQcm9qZWN0KHByb2plY3QpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb2plY3RzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvamVjdHM7XG5cbmZ1bmN0aW9uIHJvb3REaXJlY3RvcnlOYW1lc0Zyb21Qcm9qZWN0c0RpcmVjdG9yeVBhdGgocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBkb05vdExvYWRIaWRkZW5GaWxlc0FuZERpcmVjdG9yaWVzKSB7XG4gIGNvbnN0IHN1YkVudHJ5TmFtZXMgPSBwYXRoVXRpbC5zdWJFbnRyeU5hbWVzRnJvbUFic29sdXRlRGlyZWN0b3J5UGF0aChwcm9qZWN0c0RpcmVjdG9yeVBhdGgpLFxuICAgICAgICByb290RGlyZWN0b3J5TmFtZXMgPSBzdWJFbnRyeU5hbWVzLnJlZHVjZShmdW5jdGlvbihyb290RGlyZWN0b3J5TmFtZXMsIHN1YkVudHJ5TmFtZSkge1xuICAgICAgICAgIGNvbnN0IGFic29sdXRlU3ViRW50cnlQYXRoID0gcGF0aFV0aWwuY29tYmluZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc3ViRW50cnlOYW1lKSxcbiAgICAgICAgICAgICAgICBhYnNvbHV0ZVN1YkVudHJ5UGF0aEhpZGRlblBhdGggPSBwYXRoVXRpbC5pc0Fic29sdXRlUGF0aEhpZGRlblBhdGgoYWJzb2x1dGVTdWJFbnRyeVBhdGgpO1xuXG4gICAgICAgICAgaWYgKCFhYnNvbHV0ZVN1YkVudHJ5UGF0aEhpZGRlblBhdGggfHwgIWRvTm90TG9hZEhpZGRlbkZpbGVzQW5kRGlyZWN0b3JpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGFic29sdXRlU3ViRW50cnlQYXRoRGlyZWN0b3J5UGF0aCA9IHBhdGhVdGlsLmlzQWJzb2x1dGVQYXRoRGlyZWN0b3J5UGF0aChhYnNvbHV0ZVN1YkVudHJ5UGF0aCksXG4gICAgICAgICAgICAgICAgICBzdWJFbnRyeURpcmVjdG9yeSA9IGFic29sdXRlU3ViRW50cnlQYXRoRGlyZWN0b3J5UGF0aDsgIC8vL1xuXG4gICAgICAgICAgICBpZiAoc3ViRW50cnlEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgICAgY29uc3Qgcm9vdERpcmVjdG9yeU5hbWUgPSBzdWJFbnRyeU5hbWU7ICAvLy9cblxuICAgICAgICAgICAgICByb290RGlyZWN0b3J5TmFtZXMucHVzaChyb290RGlyZWN0b3J5TmFtZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcm9vdERpcmVjdG9yeU5hbWVzO1xuICAgICAgICB9LCBbXSk7XG5cbiAgcmV0dXJuIHJvb3REaXJlY3RvcnlOYW1lcztcbn1cbiJdfQ==