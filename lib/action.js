'use strict';

var request = require('request'),
    necessary = require('necessary');

var escape = require('./escape'),
    messages = require('./messages'),
    constants = require('./constants');

var asynchronousUtilities = necessary.asynchronousUtilities,
    miscellaneousUtilities = necessary.miscellaneousUtilities,
    sequence = asynchronousUtilities.sequence,
    rc = miscellaneousUtilities.rc,
    serverFailedToRespondMessage = messages.serverFailedToRespondMessage,
    apiURL = rc.apiURL;


function action(callbacks, context, uri, callback) {
  sequence(callbacks, function () {
    var url = '' + apiURL + uri,
        method = 'POST',
        encoding = 'utf8',
        timeout = 10000,
        form = context,
        ///
    options = {
      url: url,
      method: method,
      encoding: encoding,
      timeout: timeout,
      form: form
    };

    escape();

    request(options, function (error, response) {
      if (!response) {
        ///
        console.log(serverFailedToRespondMessage);
      } else {
        var body = response.body,
            json = JSON.parse(body);


        callback(json);
      }

      process.exit(); ///
    });
  }, context);
}

module.exports = action;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9hY3Rpb24uanMiXSwibmFtZXMiOlsicmVxdWVzdCIsInJlcXVpcmUiLCJuZWNlc3NhcnkiLCJlc2NhcGUiLCJtZXNzYWdlcyIsImNvbnN0YW50cyIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsIm1pc2NlbGxhbmVvdXNVdGlsaXRpZXMiLCJzZXF1ZW5jZSIsInJjIiwic2VydmVyRmFpbGVkVG9SZXNwb25kTWVzc2FnZSIsImFwaVVSTCIsImFjdGlvbiIsImNhbGxiYWNrcyIsImNvbnRleHQiLCJ1cmkiLCJjYWxsYmFjayIsInVybCIsIm1ldGhvZCIsImVuY29kaW5nIiwidGltZW91dCIsImZvcm0iLCJvcHRpb25zIiwiZXJyb3IiLCJyZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJib2R5IiwianNvbiIsIkpTT04iLCJwYXJzZSIsInByb2Nlc3MiLCJleGl0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsVUFBVUMsUUFBUSxTQUFSLENBQWhCO0FBQUEsSUFDTUMsWUFBWUQsUUFBUSxXQUFSLENBRGxCOztBQUdBLElBQU1FLFNBQVNGLFFBQVEsVUFBUixDQUFmO0FBQUEsSUFDTUcsV0FBV0gsUUFBUSxZQUFSLENBRGpCO0FBQUEsSUFFTUksWUFBWUosUUFBUSxhQUFSLENBRmxCOztJQUlRSyxxQixHQUFrREosUyxDQUFsREkscUI7SUFBdUJDLHNCLEdBQTJCTCxTLENBQTNCSyxzQjtJQUN2QkMsUSxHQUFhRixxQixDQUFiRSxRO0lBQ0FDLEUsR0FBT0Ysc0IsQ0FBUEUsRTtJQUNBQyw0QixHQUFpQ04sUSxDQUFqQ00sNEI7SUFDQUMsTSxHQUFXRixFLENBQVhFLE07OztBQUVSLFNBQVNDLE1BQVQsQ0FBZ0JDLFNBQWhCLEVBQTJCQyxPQUEzQixFQUFvQ0MsR0FBcEMsRUFBeUNDLFFBQXpDLEVBQW1EO0FBQ2pEUixXQUFTSyxTQUFULEVBQW9CLFlBQVc7QUFDN0IsUUFBTUksV0FBU04sTUFBVCxHQUFrQkksR0FBeEI7QUFBQSxRQUNNRyxTQUFTLE1BRGY7QUFBQSxRQUVNQyxXQUFXLE1BRmpCO0FBQUEsUUFHTUMsVUFBVSxLQUhoQjtBQUFBLFFBSU1DLE9BQU9QLE9BSmI7QUFBQSxRQUlzQjtBQUNoQlEsY0FBVTtBQUNSTCxXQUFNQSxHQURFO0FBRVJDLGNBQVNBLE1BRkQ7QUFHUkMsZ0JBQVVBLFFBSEY7QUFJUkMsZUFBU0EsT0FKRDtBQUtSQyxZQUFNQTtBQUxFLEtBTGhCOztBQWFBbEI7O0FBRUFILFlBQVFzQixPQUFSLEVBQWlCLFVBQVNDLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQTBCO0FBQ3pDLFVBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQUc7QUFDaEJDLGdCQUFRQyxHQUFSLENBQVloQiw0QkFBWjtBQUNELE9BRkQsTUFFTztBQUNDLFlBQUVpQixJQUFGLEdBQVdILFFBQVgsQ0FBRUcsSUFBRjtBQUFBLFlBQ0FDLElBREEsR0FDT0MsS0FBS0MsS0FBTCxDQUFXSCxJQUFYLENBRFA7OztBQUdOWCxpQkFBU1ksSUFBVDtBQUNEOztBQUVERyxjQUFRQyxJQUFSLEdBVnlDLENBVXpCO0FBQ2pCLEtBWEQ7QUFZRCxHQTVCRCxFQTRCR2xCLE9BNUJIO0FBNkJEOztBQUVEbUIsT0FBT0MsT0FBUCxHQUFpQnRCLE1BQWpCIiwiZmlsZSI6ImFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKSxcbiAgICAgIG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBlc2NhcGUgPSByZXF1aXJlKCcuL2VzY2FwZScpLFxuICAgICAgbWVzc2FnZXMgPSByZXF1aXJlKCcuL21lc3NhZ2VzJyksXG4gICAgICBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5jb25zdCB7IGFzeW5jaHJvbm91c1V0aWxpdGllcywgbWlzY2VsbGFuZW91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBzZXF1ZW5jZSB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzLFxuICAgICAgeyByYyB9ID0gbWlzY2VsbGFuZW91c1V0aWxpdGllcyxcbiAgICAgIHsgc2VydmVyRmFpbGVkVG9SZXNwb25kTWVzc2FnZSB9ID0gbWVzc2FnZXMsXG4gICAgICB7IGFwaVVSTCB9ID0gcmM7XG5cbmZ1bmN0aW9uIGFjdGlvbihjYWxsYmFja3MsIGNvbnRleHQsIHVyaSwgY2FsbGJhY2spIHtcbiAgc2VxdWVuY2UoY2FsbGJhY2tzLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB1cmwgPSBgJHthcGlVUkx9JHt1cml9YCxcbiAgICAgICAgICBtZXRob2QgPSAnUE9TVCcsXG4gICAgICAgICAgZW5jb2RpbmcgPSAndXRmOCcsXG4gICAgICAgICAgdGltZW91dCA9IDEwMDAwLFxuICAgICAgICAgIGZvcm0gPSBjb250ZXh0LCAvLy9cbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJsIDogdXJsLFxuICAgICAgICAgICAgbWV0aG9kIDogbWV0aG9kLFxuICAgICAgICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICAgICAgICAgIGZvcm06IGZvcm1cbiAgICAgICAgICB9O1xuXG4gICAgZXNjYXBlKCk7XG5cbiAgICByZXF1ZXN0KG9wdGlvbnMsIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSkge1xuICAgICAgaWYgKCFyZXNwb25zZSkgeyAgLy8vXG4gICAgICAgIGNvbnNvbGUubG9nKHNlcnZlckZhaWxlZFRvUmVzcG9uZE1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeyBib2R5IH0gPSByZXNwb25zZSxcbiAgICAgICAgICAgICAganNvbiA9IEpTT04ucGFyc2UoYm9keSk7XG5cbiAgICAgICAgY2FsbGJhY2soanNvbik7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZXhpdCgpOyAvLy9cbiAgICB9KTtcbiAgfSwgY29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWN0aW9uO1xuIl19