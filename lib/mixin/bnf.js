"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _name = require("../utilities/name");
var _fileNames = require("../fileNames");
function getBNF(bnfFileName) {
    var bnf = null;
    var customGrammarBNFFiles = this.getCustomGrammarBNFFiles(), customGrammarBNFFile = customGrammarBNFFiles.find(function(customGrammarBNFFile) {
        var customGrammarBNFFilePath = customGrammarBNFFile.getPath(), customGrammarBNFFileName = (0, _name.fileNameFromFilePath)(customGrammarBNFFilePath);
        if (customGrammarBNFFileName === bnfFileName) {
            return true;
        }
    }) || null;
    if (customGrammarBNFFile !== null) {
        var customGrammarBNFFileContent = customGrammarBNFFile.getContent();
        bnf = customGrammarBNFFileContent; ///
    }
    return bnf;
}
function getTermBNF() {
    var fileName = _fileNames.TERM_BNF_FILE_NAME, bnf = this.getBNF(fileName), termBNF = bnf; ///
    return termBNF;
}
function getStatementBNF() {
    var fileName = _fileNames.STATEMENT_BNF_FILE_NAME, bnf = this.getBNF(fileName), statementBNF = bnf; ///
    return statementBNF;
}
function getMetastatementBNF() {
    var fileName = _fileNames.METASTATEMENT_BNF_FILE_NAME, bnf = this.getBNF(fileName), metastatementBNF = bnf; ///
    return metastatementBNF;
}
var _default = {
    getBNF: getBNF,
    getTermBNF: getTermBNF,
    getStatementBNF: getStatementBNF,
    getMetastatementBNF: getMetastatementBNF
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbi9ibmYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGZpbGVOYW1lRnJvbUZpbGVQYXRoIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9uYW1lXCI7XG5pbXBvcnQgeyBURVJNX0JORl9GSUxFX05BTUUsIFNUQVRFTUVOVF9CTkZfRklMRV9OQU1FLCBNRVRBU1RBVEVNRU5UX0JORl9GSUxFX05BTUUgfSBmcm9tIFwiLi4vZmlsZU5hbWVzXCI7XG5cbmZ1bmN0aW9uIGdldEJORihibmZGaWxlTmFtZSkge1xuICBsZXQgYm5mID0gbnVsbDtcblxuICBjb25zdCBjdXN0b21HcmFtbWFyQk5GRmlsZXMgPSB0aGlzLmdldEN1c3RvbUdyYW1tYXJCTkZGaWxlcygpLFxuICAgICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZSA9IGN1c3RvbUdyYW1tYXJCTkZGaWxlcy5maW5kKChjdXN0b21HcmFtbWFyQk5GRmlsZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGggPSBjdXN0b21HcmFtbWFyQk5GRmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgICAgIGN1c3RvbUdyYW1tYXJCTkZGaWxlTmFtZSA9IGZpbGVOYW1lRnJvbUZpbGVQYXRoKGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCk7XG5cbiAgICAgICAgaWYgKGN1c3RvbUdyYW1tYXJCTkZGaWxlTmFtZSA9PT0gYm5mRmlsZU5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkgfHwgbnVsbDtcblxuICBpZiAoY3VzdG9tR3JhbW1hckJORkZpbGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBjdXN0b21HcmFtbWFyQk5GRmlsZUNvbnRlbnQgPSBjdXN0b21HcmFtbWFyQk5GRmlsZS5nZXRDb250ZW50KCk7XG5cbiAgICBibmYgPSBjdXN0b21HcmFtbWFyQk5GRmlsZUNvbnRlbnQ7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBibmY7XG59XG5cbmZ1bmN0aW9uIGdldFRlcm1CTkYoKSB7XG4gIGNvbnN0IGZpbGVOYW1lID0gVEVSTV9CTkZfRklMRV9OQU1FLCAvLy9cbiAgICAgICAgYm5mID0gdGhpcy5nZXRCTkYoZmlsZU5hbWUpLFxuICAgICAgICB0ZXJtQk5GID0gYm5mOyAgLy8vXG5cbiAgcmV0dXJuIHRlcm1CTkY7XG59XG5cbmZ1bmN0aW9uIGdldFN0YXRlbWVudEJORigpIHtcbiAgY29uc3QgZmlsZU5hbWUgPSBTVEFURU1FTlRfQk5GX0ZJTEVfTkFNRSwgLy8vXG4gICAgICAgIGJuZiA9IHRoaXMuZ2V0Qk5GKGZpbGVOYW1lKSxcbiAgICAgICAgc3RhdGVtZW50Qk5GID0gYm5mOyAgLy8vXG5cbiAgcmV0dXJuIHN0YXRlbWVudEJORjtcbn1cblxuZnVuY3Rpb24gZ2V0TWV0YXN0YXRlbWVudEJORigpIHtcbiAgY29uc3QgZmlsZU5hbWUgPSBNRVRBU1RBVEVNRU5UX0JORl9GSUxFX05BTUUsIC8vL1xuICAgICAgICBibmYgPSB0aGlzLmdldEJORihmaWxlTmFtZSksXG4gICAgICAgIG1ldGFzdGF0ZW1lbnRCTkYgPSBibmY7ICAvLy9cblxuICByZXR1cm4gbWV0YXN0YXRlbWVudEJORjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRCTkYsXG4gIGdldFRlcm1CTkYsXG4gIGdldFN0YXRlbWVudEJORixcbiAgZ2V0TWV0YXN0YXRlbWVudEJORlxufTtcbiJdLCJuYW1lcyI6WyJnZXRCTkYiLCJibmZGaWxlTmFtZSIsImJuZiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlcyIsImdldEN1c3RvbUdyYW1tYXJCTkZGaWxlcyIsImN1c3RvbUdyYW1tYXJCTkZGaWxlIiwiZmluZCIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImdldFBhdGgiLCJjdXN0b21HcmFtbWFyQk5GRmlsZU5hbWUiLCJmaWxlTmFtZUZyb21GaWxlUGF0aCIsImN1c3RvbUdyYW1tYXJCTkZGaWxlQ29udGVudCIsImdldENvbnRlbnQiLCJnZXRUZXJtQk5GIiwiZmlsZU5hbWUiLCJURVJNX0JORl9GSUxFX05BTUUiLCJ0ZXJtQk5GIiwiZ2V0U3RhdGVtZW50Qk5GIiwiU1RBVEVNRU5UX0JORl9GSUxFX05BTUUiLCJzdGF0ZW1lbnRCTkYiLCJnZXRNZXRhc3RhdGVtZW50Qk5GIiwiTUVUQVNUQVRFTUVOVF9CTkZfRklMRV9OQU1FIiwibWV0YXN0YXRlbWVudEJORiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBbURBOzs7ZUFBQTs7O29CQWpEcUM7eUJBQ29EO0FBRXpGLFNBQVNBLE9BQU9DLFdBQVcsRUFBRTtJQUMzQixJQUFJQyxNQUFNLElBQUk7SUFFZCxJQUFNQyx3QkFBd0IsSUFBSSxDQUFDQyx3QkFBd0IsSUFDckRDLHVCQUF1QkYsc0JBQXNCRyxJQUFJLENBQUMsU0FBQ0Qsc0JBQXlCO1FBQzVFLElBQU1FLDJCQUEyQkYscUJBQXFCRyxPQUFPLElBQ3ZEQywyQkFBMkJDLElBQUFBLDBCQUFvQixFQUFDSDtRQUV0RCxJQUFJRSw2QkFBNkJSLGFBQWE7WUFDNUMsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNILE1BQU0sSUFBSTtJQUVkLElBQUlJLHlCQUF5QixJQUFJLEVBQUU7UUFDakMsSUFBTU0sOEJBQThCTixxQkFBcUJPLFVBQVU7UUFFbkVWLE1BQU1TLDZCQUE4QixHQUFHO0lBQ3pDLENBQUM7SUFFRCxPQUFPVDtBQUNUO0FBRUEsU0FBU1csYUFBYTtJQUNwQixJQUFNQyxXQUFXQyw2QkFBa0IsRUFDN0JiLE1BQU0sSUFBSSxDQUFDRixNQUFNLENBQUNjLFdBQ2xCRSxVQUFVZCxLQUFNLEdBQUc7SUFFekIsT0FBT2M7QUFDVDtBQUVBLFNBQVNDLGtCQUFrQjtJQUN6QixJQUFNSCxXQUFXSSxrQ0FBdUIsRUFDbENoQixNQUFNLElBQUksQ0FBQ0YsTUFBTSxDQUFDYyxXQUNsQkssZUFBZWpCLEtBQU0sR0FBRztJQUU5QixPQUFPaUI7QUFDVDtBQUVBLFNBQVNDLHNCQUFzQjtJQUM3QixJQUFNTixXQUFXTyxzQ0FBMkIsRUFDdENuQixNQUFNLElBQUksQ0FBQ0YsTUFBTSxDQUFDYyxXQUNsQlEsbUJBQW1CcEIsS0FBTSxHQUFHO0lBRWxDLE9BQU9vQjtBQUNUO0lBRUEsV0FBZTtJQUNidEIsUUFBQUE7SUFDQWEsWUFBQUE7SUFDQUksaUJBQUFBO0lBQ0FHLHFCQUFBQTtBQUNGIn0=