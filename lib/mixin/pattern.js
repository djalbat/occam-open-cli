"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _name = require("../utilities/name");
var _fileNames = require("../fileNames");
function getPattern(patternFileName) {
    var pattern = null;
    var customGrammarPatternFiles = this.getCustomGrammarPatternFiles(), customGrammarPatternFile = customGrammarPatternFiles.find(function(customGrammarPatternFile) {
        var customGrammarPatternFilePath = customGrammarPatternFile.getPath(), customGrammarPatternFileName = (0, _name.fileNameFromFilePath)(customGrammarPatternFilePath);
        if (customGrammarPatternFileName === patternFileName) {
            return true;
        }
    }) || null;
    if (customGrammarPatternFile !== null) {
        var customGrammarPatternFileContent = customGrammarPatternFile.getContent();
        pattern = customGrammarPatternFileContent; ///
    }
    return pattern;
}
function getTypePattern() {
    var fileName = _fileNames.TYPE_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), typePattern = pattern; ///
    return typePattern;
}
function getSymbolPattern() {
    var fileName = _fileNames.SYMBOL_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), symbolPattern = pattern; ///
    return symbolPattern;
}
function getOperatorPattern() {
    var fileName = _fileNames.OPERATOR_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), operatorPattern = pattern; ///
    return operatorPattern;
}
var _default = {
    getPattern: getPattern,
    getTypePattern: getTypePattern,
    getSymbolPattern: getSymbolPattern,
    getOperatorPattern: getOperatorPattern
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbi9wYXR0ZXJuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBmaWxlTmFtZUZyb21GaWxlUGF0aCB9IGZyb20gXCIuLi91dGlsaXRpZXMvbmFtZVwiO1xuaW1wb3J0IHsgVFlQRV9QQVRURVJOX0ZJTEVfTkFNRSwgU1lNQk9MX1BBVFRFUk5fRklMRV9OQU1FLCBPUEVSQVRPUl9QQVRURVJOX0ZJTEVfTkFNRSB9IGZyb20gXCIuLi9maWxlTmFtZXNcIjtcblxuZnVuY3Rpb24gZ2V0UGF0dGVybihwYXR0ZXJuRmlsZU5hbWUpIHtcbiAgbGV0IHBhdHRlcm4gPSBudWxsO1xuXG4gIGNvbnN0IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMgPSB0aGlzLmdldEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMoKSxcbiAgICAgICAgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlID0gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcy5maW5kKChjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUpID0+IHtcbiAgICAgICAgY29uc3QgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aCA9IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZU5hbWUgPSBmaWxlTmFtZUZyb21GaWxlUGF0aChjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoKTtcblxuICAgICAgICBpZiAoY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlTmFtZSA9PT0gcGF0dGVybkZpbGVOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pIHx8IG51bGw7XG5cbiAgaWYgKGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZUNvbnRlbnQgPSBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUuZ2V0Q29udGVudCgpO1xuXG4gICAgcGF0dGVybiA9IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZUNvbnRlbnQ7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBwYXR0ZXJuO1xufVxuXG5mdW5jdGlvbiBnZXRUeXBlUGF0dGVybigpIHtcbiAgY29uc3QgZmlsZU5hbWUgPSBUWVBFX1BBVFRFUk5fRklMRV9OQU1FLCAvLy9cbiAgICAgICAgcGF0dGVybiA9IHRoaXMuZ2V0UGF0dGVybihmaWxlTmFtZSksXG4gICAgICAgIHR5cGVQYXR0ZXJuID0gcGF0dGVybjsgIC8vL1xuXG4gIHJldHVybiB0eXBlUGF0dGVybjtcbn1cblxuZnVuY3Rpb24gZ2V0U3ltYm9sUGF0dGVybigpIHtcbiAgY29uc3QgZmlsZU5hbWUgPSBTWU1CT0xfUEFUVEVSTl9GSUxFX05BTUUsIC8vL1xuICAgICAgICBwYXR0ZXJuID0gdGhpcy5nZXRQYXR0ZXJuKGZpbGVOYW1lKSxcbiAgICAgICAgc3ltYm9sUGF0dGVybiA9IHBhdHRlcm47ICAvLy9cblxuICByZXR1cm4gc3ltYm9sUGF0dGVybjtcbn1cblxuZnVuY3Rpb24gZ2V0T3BlcmF0b3JQYXR0ZXJuKCkge1xuICBjb25zdCBmaWxlTmFtZSA9IE9QRVJBVE9SX1BBVFRFUk5fRklMRV9OQU1FLCAvLy9cbiAgICAgICAgcGF0dGVybiA9IHRoaXMuZ2V0UGF0dGVybihmaWxlTmFtZSksXG4gICAgICAgIG9wZXJhdG9yUGF0dGVybiA9IHBhdHRlcm47ICAvLy9cblxuICByZXR1cm4gb3BlcmF0b3JQYXR0ZXJuO1xufVxuXG5leHBvcnQgZGVmYXVsdCAge1xuICBnZXRQYXR0ZXJuLFxuICBnZXRUeXBlUGF0dGVybixcbiAgZ2V0U3ltYm9sUGF0dGVybixcbiAgZ2V0T3BlcmF0b3JQYXR0ZXJuXG59O1xuIl0sIm5hbWVzIjpbImdldFBhdHRlcm4iLCJwYXR0ZXJuRmlsZU5hbWUiLCJwYXR0ZXJuIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcyIsImdldEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMiLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUiLCJmaW5kIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aCIsImdldFBhdGgiLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVOYW1lIiwiZmlsZU5hbWVGcm9tRmlsZVBhdGgiLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVDb250ZW50IiwiZ2V0Q29udGVudCIsImdldFR5cGVQYXR0ZXJuIiwiZmlsZU5hbWUiLCJUWVBFX1BBVFRFUk5fRklMRV9OQU1FIiwidHlwZVBhdHRlcm4iLCJnZXRTeW1ib2xQYXR0ZXJuIiwiU1lNQk9MX1BBVFRFUk5fRklMRV9OQU1FIiwic3ltYm9sUGF0dGVybiIsImdldE9wZXJhdG9yUGF0dGVybiIsIk9QRVJBVE9SX1BBVFRFUk5fRklMRV9OQU1FIiwib3BlcmF0b3JQYXR0ZXJuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFtREE7OztlQUFBOzs7b0JBakRxQzt5QkFDd0Q7QUFFN0YsU0FBU0EsV0FBV0MsZUFBZSxFQUFFO0lBQ25DLElBQUlDLFVBQVUsSUFBSTtJQUVsQixJQUFNQyw0QkFBNEIsSUFBSSxDQUFDQyw0QkFBNEIsSUFDN0RDLDJCQUEyQkYsMEJBQTBCRyxJQUFJLENBQUMsU0FBQ0QsMEJBQTZCO1FBQ3hGLElBQU1FLCtCQUErQkYseUJBQXlCRyxPQUFPLElBQy9EQywrQkFBK0JDLElBQUFBLDBCQUFvQixFQUFDSDtRQUUxRCxJQUFJRSxpQ0FBaUNSLGlCQUFpQjtZQUNwRCxPQUFPLElBQUk7UUFDYixDQUFDO0lBQ0gsTUFBTSxJQUFJO0lBRWQsSUFBSUksNkJBQTZCLElBQUksRUFBRTtRQUNyQyxJQUFNTSxrQ0FBa0NOLHlCQUF5Qk8sVUFBVTtRQUUzRVYsVUFBVVMsaUNBQWtDLEdBQUc7SUFDakQsQ0FBQztJQUVELE9BQU9UO0FBQ1Q7QUFFQSxTQUFTVyxpQkFBaUI7SUFDeEIsSUFBTUMsV0FBV0MsaUNBQXNCLEVBQ2pDYixVQUFVLElBQUksQ0FBQ0YsVUFBVSxDQUFDYyxXQUMxQkUsY0FBY2QsU0FBVSxHQUFHO0lBRWpDLE9BQU9jO0FBQ1Q7QUFFQSxTQUFTQyxtQkFBbUI7SUFDMUIsSUFBTUgsV0FBV0ksbUNBQXdCLEVBQ25DaEIsVUFBVSxJQUFJLENBQUNGLFVBQVUsQ0FBQ2MsV0FDMUJLLGdCQUFnQmpCLFNBQVUsR0FBRztJQUVuQyxPQUFPaUI7QUFDVDtBQUVBLFNBQVNDLHFCQUFxQjtJQUM1QixJQUFNTixXQUFXTyxxQ0FBMEIsRUFDckNuQixVQUFVLElBQUksQ0FBQ0YsVUFBVSxDQUFDYyxXQUMxQlEsa0JBQWtCcEIsU0FBVSxHQUFHO0lBRXJDLE9BQU9vQjtBQUNUO0lBRUEsV0FBZ0I7SUFDZHRCLFlBQUFBO0lBQ0FhLGdCQUFBQTtJQUNBSSxrQkFBQUE7SUFDQUcsb0JBQUFBO0FBQ0YifQ==