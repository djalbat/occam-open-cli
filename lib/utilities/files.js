"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _filePath = require("../utilities/filePath");
function readmeFileFromFiles(files) {
    var readmeFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathReadmeFilePath = (0, _filePath.isFilePathReadmeFilePath)(filePath);
        if (filePathReadmeFilePath) {
            readmeFile = file; ///
            return true;
        }
    });
    return readmeFile;
}
function metaJSONFileFromFiles(files) {
    var metaJSONFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathMetaJSONFilePath = (0, _filePath.isFilePathMetaJSONFilePath)(filePath);
        if (filePathMetaJSONFilePath) {
            metaJSONFile = file; ///
            return true;
        }
    });
    return metaJSONFile;
}
function florenceFilesFromFiles(files) {
    var florenceFiles = files.reduceFile(function(florenceFiles, file) {
        var filePath = file.getPath(), filePathFlorenceFilePath = (0, _filePath.isFilePathFlorenceFilePath)(filePath), fileFlorenceFile = filePathFlorenceFilePath; ///
        if (fileFlorenceFile) {
            var florenceFile = file; ///
            florenceFiles.push(florenceFile);
        }
        return florenceFiles;
    }, []);
    return florenceFiles;
}
function customGrammarBNFFilesFromFiles(files) {
    var customGrammarBNFFiles = files.reduceFile(function(customGrammarBNFFiles, file) {
        var filePath = file.getPath(), filePathCustomGrammarBNFFilePath = (0, _filePath.isFilePathCustomGrammarBNFFilePath)(filePath), fileCustomGrammarBNFFile = filePathCustomGrammarBNFFilePath; ///
        if (fileCustomGrammarBNFFile) {
            var customGrammarBNFFile = file; ///
            customGrammarBNFFiles.push(customGrammarBNFFile);
        }
        return customGrammarBNFFiles;
    }, []);
    return customGrammarBNFFiles;
}
function customGrammarPatternFilesFromFiles(files) {
    var customGrammarPatternFiles = files.reduceFile(function(customGrammarPatternFiles, file) {
        var filePath = file.getPath(), filePathCustomGrammarPatternFilePath = (0, _filePath.isFilePathCustomGrammarPatternFilePath)(filePath), fileCustomGrammarPatternFile = filePathCustomGrammarPatternFilePath; ///
        if (fileCustomGrammarPatternFile) {
            var customGrammarPatternFile = file; ///
            customGrammarPatternFiles.push(customGrammarPatternFile);
        }
        return customGrammarPatternFiles;
    }, []);
    return customGrammarPatternFiles;
}
var _default = {
    readmeFileFromFiles: readmeFileFromFiles,
    metaJSONFileFromFiles: metaJSONFileFromFiles,
    florenceFilesFromFiles: florenceFilesFromFiles,
    customGrammarBNFFilesFromFiles: customGrammarBNFFilesFromFiles,
    customGrammarPatternFilesFromFiles: customGrammarPatternFilesFromFiles
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCxcbiAgICAgICAgIGlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoLFxuICAgICAgICAgaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgsXG4gICAgICAgICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoLFxuICAgICAgICAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbGVQYXRoXCI7XG5cbmZ1bmN0aW9uIHJlYWRtZUZpbGVGcm9tRmlsZXMoZmlsZXMpIHtcbiAgbGV0IHJlYWRtZUZpbGUgPSBudWxsO1xuXG4gIGZpbGVzLnNvbWVGaWxlKChmaWxlKSA9PiB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICBmaWxlUGF0aFJlYWRtZUZpbGVQYXRoID0gaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoKGZpbGVQYXRoKTtcblxuICAgIGlmIChmaWxlUGF0aFJlYWRtZUZpbGVQYXRoKSB7XG4gICAgICByZWFkbWVGaWxlID0gZmlsZTsgIC8vL1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWFkbWVGaWxlO1xufVxuXG5mdW5jdGlvbiBtZXRhSlNPTkZpbGVGcm9tRmlsZXMoZmlsZXMpIHtcbiAgbGV0IG1ldGFKU09ORmlsZSA9IG51bGw7XG5cbiAgZmlsZXMuc29tZUZpbGUoKGZpbGUpID0+IHtcbiAgICBjb25zdCBmaWxlUGF0aCA9IGZpbGUuZ2V0UGF0aCgpLFxuICAgICAgICAgIGZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCA9IGlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoKGZpbGVQYXRoKTtcblxuICAgIGlmIChmaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgpIHtcbiAgICAgIG1ldGFKU09ORmlsZSA9IGZpbGU7ICAvLy9cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbWV0YUpTT05GaWxlO1xufVxuXG5mdW5jdGlvbiBmbG9yZW5jZUZpbGVzRnJvbUZpbGVzKGZpbGVzKSB7XG4gIGNvbnN0IGZsb3JlbmNlRmlsZXMgPSBmaWxlcy5yZWR1Y2VGaWxlKChmbG9yZW5jZUZpbGVzLCBmaWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGggPSBpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aChmaWxlUGF0aCksXG4gICAgICAgICAgICAgICAgZmlsZUZsb3JlbmNlRmlsZSA9IGZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aDsgIC8vL1xuXG4gICAgICAgICAgaWYgKGZpbGVGbG9yZW5jZUZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZsb3JlbmNlRmlsZSA9IGZpbGU7ICAvLy9cblxuICAgICAgICAgICAgZmxvcmVuY2VGaWxlcy5wdXNoKGZsb3JlbmNlRmlsZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZsb3JlbmNlRmlsZXM7XG4gICAgICAgIH0sIFtdKTtcblxuICByZXR1cm4gZmxvcmVuY2VGaWxlcztcbn1cblxuZnVuY3Rpb24gY3VzdG9tR3JhbW1hckJORkZpbGVzRnJvbUZpbGVzKGZpbGVzKSB7XG4gIGNvbnN0IGN1c3RvbUdyYW1tYXJCTkZGaWxlcyA9IGZpbGVzLnJlZHVjZUZpbGUoKGN1c3RvbUdyYW1tYXJCTkZGaWxlcywgZmlsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gZmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgICAgICAgZmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGggPSBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoKGZpbGVQYXRoKSxcbiAgICAgICAgICAgICAgICBmaWxlQ3VzdG9tR3JhbW1hckJORkZpbGUgPSBmaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aDsgIC8vL1xuXG4gICAgICAgICAgaWYgKGZpbGVDdXN0b21HcmFtbWFyQk5GRmlsZSkge1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tR3JhbW1hckJORkZpbGUgPSBmaWxlOyAgLy8vXG5cbiAgICAgICAgICAgIGN1c3RvbUdyYW1tYXJCTkZGaWxlcy5wdXNoKGN1c3RvbUdyYW1tYXJCTkZGaWxlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY3VzdG9tR3JhbW1hckJORkZpbGVzO1xuICAgICAgICB9LCBbXSk7XG5cbiAgcmV0dXJuIGN1c3RvbUdyYW1tYXJCTkZGaWxlcztcbn1cblxuZnVuY3Rpb24gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlc0Zyb21GaWxlcyhmaWxlcykge1xuICBjb25zdCBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzID0gZmlsZXMucmVkdWNlRmlsZSgoY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcywgZmlsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gZmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgICAgICAgZmlsZVBhdGhDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoID0gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgoZmlsZVBhdGgpLFxuICAgICAgICAgICAgICAgIGZpbGVDdXN0b21HcmFtbWFyUGF0dGVybkZpbGUgPSBmaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGg7ICAvLy9cblxuICAgICAgICAgIGlmIChmaWxlQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUgPSBmaWxlOyAgLy8vXG5cbiAgICAgICAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMucHVzaChjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzO1xuICAgICAgICB9LCBbXSk7XG5cbiAgcmV0dXJuIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVhZG1lRmlsZUZyb21GaWxlcyxcbiAgbWV0YUpTT05GaWxlRnJvbUZpbGVzLFxuICBmbG9yZW5jZUZpbGVzRnJvbUZpbGVzLFxuICBjdXN0b21HcmFtbWFyQk5GRmlsZXNGcm9tRmlsZXMsXG4gIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXNGcm9tRmlsZXNcbn07XG4iXSwibmFtZXMiOlsicmVhZG1lRmlsZUZyb21GaWxlcyIsImZpbGVzIiwicmVhZG1lRmlsZSIsInNvbWVGaWxlIiwiZmlsZSIsImZpbGVQYXRoIiwiZ2V0UGF0aCIsImZpbGVQYXRoUmVhZG1lRmlsZVBhdGgiLCJpc0ZpbGVQYXRoUmVhZG1lRmlsZVBhdGgiLCJtZXRhSlNPTkZpbGVGcm9tRmlsZXMiLCJtZXRhSlNPTkZpbGUiLCJmaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgiLCJpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCIsImZsb3JlbmNlRmlsZXNGcm9tRmlsZXMiLCJmbG9yZW5jZUZpbGVzIiwicmVkdWNlRmlsZSIsImZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aCIsImlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoIiwiZmlsZUZsb3JlbmNlRmlsZSIsImZsb3JlbmNlRmlsZSIsInB1c2giLCJjdXN0b21HcmFtbWFyQk5GRmlsZXNGcm9tRmlsZXMiLCJjdXN0b21HcmFtbWFyQk5GRmlsZXMiLCJmaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgiLCJmaWxlQ3VzdG9tR3JhbW1hckJORkZpbGUiLCJjdXN0b21HcmFtbWFyQk5GRmlsZSIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXNGcm9tRmlsZXMiLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzIiwiZmlsZVBhdGhDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoIiwiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgiLCJmaWxlQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFnR0E7OztlQUFBOzs7d0JBMUZ1RDtBQUV2RCxTQUFTQSxvQkFBb0JDLEtBQUssRUFBRTtJQUNsQyxJQUFJQyxhQUFhLElBQUk7SUFFckJELE1BQU1FLFFBQVEsQ0FBQyxTQUFDQyxNQUFTO1FBQ3ZCLElBQU1DLFdBQVdELEtBQUtFLE9BQU8sSUFDdkJDLHlCQUF5QkMsSUFBQUEsa0NBQXdCLEVBQUNIO1FBRXhELElBQUlFLHdCQUF3QjtZQUMxQkwsYUFBYUUsTUFBTyxHQUFHO1lBRXZCLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSDtJQUVBLE9BQU9GO0FBQ1Q7QUFFQSxTQUFTTyxzQkFBc0JSLEtBQUssRUFBRTtJQUNwQyxJQUFJUyxlQUFlLElBQUk7SUFFdkJULE1BQU1FLFFBQVEsQ0FBQyxTQUFDQyxNQUFTO1FBQ3ZCLElBQU1DLFdBQVdELEtBQUtFLE9BQU8sSUFDdkJLLDJCQUEyQkMsSUFBQUEsb0NBQTBCLEVBQUNQO1FBRTVELElBQUlNLDBCQUEwQjtZQUM1QkQsZUFBZU4sTUFBTyxHQUFHO1lBRXpCLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSDtJQUVBLE9BQU9NO0FBQ1Q7QUFFQSxTQUFTRyx1QkFBdUJaLEtBQUssRUFBRTtJQUNyQyxJQUFNYSxnQkFBZ0JiLE1BQU1jLFVBQVUsQ0FBQyxTQUFDRCxlQUFlVixNQUFTO1FBQ3hELElBQU1DLFdBQVdELEtBQUtFLE9BQU8sSUFDdkJVLDJCQUEyQkMsSUFBQUEsb0NBQTBCLEVBQUNaLFdBQ3REYSxtQkFBbUJGLDBCQUEyQixHQUFHO1FBRXZELElBQUlFLGtCQUFrQjtZQUNwQixJQUFNQyxlQUFlZixNQUFPLEdBQUc7WUFFL0JVLGNBQWNNLElBQUksQ0FBQ0Q7UUFDckIsQ0FBQztRQUVELE9BQU9MO0lBQ1QsR0FBRyxFQUFFO0lBRVgsT0FBT0E7QUFDVDtBQUVBLFNBQVNPLCtCQUErQnBCLEtBQUssRUFBRTtJQUM3QyxJQUFNcUIsd0JBQXdCckIsTUFBTWMsVUFBVSxDQUFDLFNBQUNPLHVCQUF1QmxCLE1BQVM7UUFDeEUsSUFBTUMsV0FBV0QsS0FBS0UsT0FBTyxJQUN2QmlCLG1DQUFtQ0MsSUFBQUEsNENBQWtDLEVBQUNuQixXQUN0RW9CLDJCQUEyQkYsa0NBQW1DLEdBQUc7UUFFdkUsSUFBSUUsMEJBQTBCO1lBQzVCLElBQU1DLHVCQUF1QnRCLE1BQU8sR0FBRztZQUV2Q2tCLHNCQUFzQkYsSUFBSSxDQUFDTTtRQUM3QixDQUFDO1FBRUQsT0FBT0o7SUFDVCxHQUFHLEVBQUU7SUFFWCxPQUFPQTtBQUNUO0FBRUEsU0FBU0ssbUNBQW1DMUIsS0FBSyxFQUFFO0lBQ2pELElBQU0yQiw0QkFBNEIzQixNQUFNYyxVQUFVLENBQUMsU0FBQ2EsMkJBQTJCeEIsTUFBUztRQUNoRixJQUFNQyxXQUFXRCxLQUFLRSxPQUFPLElBQ3ZCdUIsdUNBQXVDQyxJQUFBQSxnREFBc0MsRUFBQ3pCLFdBQzlFMEIsK0JBQStCRixzQ0FBdUMsR0FBRztRQUUvRSxJQUFJRSw4QkFBOEI7WUFDaEMsSUFBTUMsMkJBQTJCNUIsTUFBTyxHQUFHO1lBRTNDd0IsMEJBQTBCUixJQUFJLENBQUNZO1FBQ2pDLENBQUM7UUFFRCxPQUFPSjtJQUNULEdBQUcsRUFBRTtJQUVYLE9BQU9BO0FBQ1Q7SUFFQSxXQUFlO0lBQ2I1QixxQkFBQUE7SUFDQVMsdUJBQUFBO0lBQ0FJLHdCQUFBQTtJQUNBUSxnQ0FBQUE7SUFDQU0sb0NBQUFBO0FBQ0YifQ==