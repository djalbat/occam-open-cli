'use strict';

function findNodeByClass(node, Class) {
  var foundNode = null;

  if (node instanceof Class) {
    foundNode = node;
  } else {
    var nodeNonTerminalNode = node.isNonTerminalNode();

    if (nodeNonTerminalNode) {
      var nonTerminalNode = node,
          ///
      childNodes = nonTerminalNode.getChildNodes();
      childNodes.some(function (childNode) {
        foundNode = findNodeByClass(childNode, Class);

        if (foundNode !== null) {
          return true;
        }
      });
    }
  }

  return foundNode;
}

function findNodesByClass(node, Class) {
  var foundNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (node instanceof Class) {
    var foundNode = node; ///

    foundNodes.push(foundNode);
  } else {
    var nodeNonTerminalNode = node.isNonTerminalNode();

    if (nodeNonTerminalNode) {
      var nonTerminalNode = node,
          ///
      childNodes = nonTerminalNode.getChildNodes();
      childNodes.forEach(function (childNode) {
        findNodesByClass(childNode, Class, foundNodes);
      });
    }
  }

  return foundNodes;
}

function findTerminalNodes(node) {
  var foundTerminalNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var foundTerminalNode = node; ///

    foundTerminalNodes.push(foundTerminalNode);
  } else {
    var nodeNonTerminalNode = node.isNonTerminalNode();

    if (nodeNonTerminalNode) {
      var nonTerminalNode = node,
          ///
      childNodes = nonTerminalNode.getChildNodes();
      childNodes.forEach(function (childNode) {
        findTerminalNodes(childNode, foundTerminalNodes);
      });
    }
  }

  return foundTerminalNodes;
}

module.exports = {
  findNodeByClass: findNodeByClass,
  findNodesByClass: findNodesByClass,
  findTerminalNodes: findTerminalNodes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGUuanMiXSwibmFtZXMiOlsiZmluZE5vZGVCeUNsYXNzIiwibm9kZSIsIkNsYXNzIiwiZm91bmROb2RlIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJzb21lIiwiY2hpbGROb2RlIiwiZmluZE5vZGVzQnlDbGFzcyIsImZvdW5kTm9kZXMiLCJwdXNoIiwiZm9yRWFjaCIsImZpbmRUZXJtaW5hbE5vZGVzIiwiZm91bmRUZXJtaW5hbE5vZGVzIiwibm9kZVRlcm1pbmFsTm9kZSIsImlzVGVybWluYWxOb2RlIiwiZm91bmRUZXJtaW5hbE5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxlQUFULENBQXlCQyxJQUF6QixFQUErQkMsS0FBL0IsRUFBc0M7QUFDcEMsTUFBSUMsU0FBUyxHQUFHLElBQWhCOztBQUVBLE1BQUlGLElBQUksWUFBWUMsS0FBcEIsRUFBMkI7QUFDekJDLElBQUFBLFNBQVMsR0FBR0YsSUFBWjtBQUNELEdBRkQsTUFFTztBQUNMLFFBQU1HLG1CQUFtQixHQUFHSCxJQUFJLENBQUNJLGlCQUFMLEVBQTVCOztBQUVBLFFBQUlELG1CQUFKLEVBQXlCO0FBQ3ZCLFVBQU1FLGVBQWUsR0FBR0wsSUFBeEI7QUFBQSxVQUE4QjtBQUN4Qk0sTUFBQUEsVUFBVSxHQUFHRCxlQUFlLENBQUNFLGFBQWhCLEVBRG5CO0FBR0FELE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQixVQUFDQyxTQUFELEVBQWU7QUFDN0JQLFFBQUFBLFNBQVMsR0FBR0gsZUFBZSxDQUFDVSxTQUFELEVBQVlSLEtBQVosQ0FBM0I7O0FBRUEsWUFBSUMsU0FBUyxLQUFLLElBQWxCLEVBQXdCO0FBQ3RCLGlCQUFPLElBQVA7QUFDRDtBQUNGLE9BTkQ7QUFPRDtBQUNGOztBQUVELFNBQU9BLFNBQVA7QUFDRDs7QUFFRCxTQUFTUSxnQkFBVCxDQUEwQlYsSUFBMUIsRUFBZ0NDLEtBQWhDLEVBQXdEO0FBQUEsTUFBakJVLFVBQWlCLHVFQUFKLEVBQUk7O0FBQ3RELE1BQUlYLElBQUksWUFBWUMsS0FBcEIsRUFBMkI7QUFDekIsUUFBTUMsU0FBUyxHQUFHRixJQUFsQixDQUR5QixDQUNEOztBQUV4QlcsSUFBQUEsVUFBVSxDQUFDQyxJQUFYLENBQWdCVixTQUFoQjtBQUNELEdBSkQsTUFJTztBQUNMLFFBQU1DLG1CQUFtQixHQUFHSCxJQUFJLENBQUNJLGlCQUFMLEVBQTVCOztBQUVBLFFBQUlELG1CQUFKLEVBQXlCO0FBQ3ZCLFVBQU1FLGVBQWUsR0FBR0wsSUFBeEI7QUFBQSxVQUE4QjtBQUN4Qk0sTUFBQUEsVUFBVSxHQUFHRCxlQUFlLENBQUNFLGFBQWhCLEVBRG5CO0FBR0FELE1BQUFBLFVBQVUsQ0FBQ08sT0FBWCxDQUFtQixVQUFDSixTQUFELEVBQWU7QUFDaENDLFFBQUFBLGdCQUFnQixDQUFDRCxTQUFELEVBQVlSLEtBQVosRUFBbUJVLFVBQW5CLENBQWhCO0FBQ0QsT0FGRDtBQUdEO0FBQ0Y7O0FBRUQsU0FBT0EsVUFBUDtBQUNEOztBQUVELFNBQVNHLGlCQUFULENBQTJCZCxJQUEzQixFQUEwRDtBQUFBLE1BQXpCZSxrQkFBeUIsdUVBQUosRUFBSTtBQUN4RCxNQUFNQyxnQkFBZ0IsR0FBR2hCLElBQUksQ0FBQ2lCLGNBQUwsRUFBekI7O0FBRUEsTUFBSUQsZ0JBQUosRUFBc0I7QUFDcEIsUUFBTUUsaUJBQWlCLEdBQUdsQixJQUExQixDQURvQixDQUNZOztBQUVoQ2UsSUFBQUEsa0JBQWtCLENBQUNILElBQW5CLENBQXdCTSxpQkFBeEI7QUFDRCxHQUpELE1BSU87QUFDTCxRQUFNZixtQkFBbUIsR0FBR0gsSUFBSSxDQUFDSSxpQkFBTCxFQUE1Qjs7QUFFQSxRQUFJRCxtQkFBSixFQUF5QjtBQUN2QixVQUFNRSxlQUFlLEdBQUdMLElBQXhCO0FBQUEsVUFBOEI7QUFDeEJNLE1BQUFBLFVBQVUsR0FBR0QsZUFBZSxDQUFDRSxhQUFoQixFQURuQjtBQUdBRCxNQUFBQSxVQUFVLENBQUNPLE9BQVgsQ0FBbUIsVUFBQ0osU0FBRCxFQUFlO0FBQ2hDSyxRQUFBQSxpQkFBaUIsQ0FBQ0wsU0FBRCxFQUFZTSxrQkFBWixDQUFqQjtBQUNELE9BRkQ7QUFHRDtBQUNGOztBQUVELFNBQU9BLGtCQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmckIsRUFBQUEsZUFBZSxFQUFmQSxlQURlO0FBRWZXLEVBQUFBLGdCQUFnQixFQUFoQkEsZ0JBRmU7QUFHZkksRUFBQUEsaUJBQWlCLEVBQWpCQTtBQUhlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBmaW5kTm9kZUJ5Q2xhc3Mobm9kZSwgQ2xhc3MpIHtcbiAgbGV0IGZvdW5kTm9kZSA9IG51bGw7XG5cbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBDbGFzcykge1xuICAgIGZvdW5kTm9kZSA9IG5vZGU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICAgIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICAgIGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgICBjaGlsZE5vZGVzLnNvbWUoKGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICBmb3VuZE5vZGUgPSBmaW5kTm9kZUJ5Q2xhc3MoY2hpbGROb2RlLCBDbGFzcyk7XG5cbiAgICAgICAgaWYgKGZvdW5kTm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm91bmROb2RlO1xufVxuXG5mdW5jdGlvbiBmaW5kTm9kZXNCeUNsYXNzKG5vZGUsIENsYXNzLCBmb3VuZE5vZGVzID0gW10pIHtcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBDbGFzcykge1xuICAgIGNvbnN0IGZvdW5kTm9kZSA9IG5vZGU7IC8vL1xuXG4gICAgZm91bmROb2Rlcy5wdXNoKGZvdW5kTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICAgIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICAgIGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgICBjaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICBmaW5kTm9kZXNCeUNsYXNzKGNoaWxkTm9kZSwgQ2xhc3MsIGZvdW5kTm9kZXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvdW5kTm9kZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRUZXJtaW5hbE5vZGVzKG5vZGUsIGZvdW5kVGVybWluYWxOb2RlcyA9IFtdKSB7XG4gIGNvbnN0IG5vZGVUZXJtaW5hbE5vZGUgPSBub2RlLmlzVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVUZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBmb3VuZFRlcm1pbmFsTm9kZSA9IG5vZGU7IC8vL1xuXG4gICAgZm91bmRUZXJtaW5hbE5vZGVzLnB1c2goZm91bmRUZXJtaW5hbE5vZGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgICBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKTtcblxuICAgICAgY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZE5vZGUpID0+IHtcbiAgICAgICAgZmluZFRlcm1pbmFsTm9kZXMoY2hpbGROb2RlLCBmb3VuZFRlcm1pbmFsTm9kZXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvdW5kVGVybWluYWxOb2Rlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpbmROb2RlQnlDbGFzcyxcbiAgZmluZE5vZGVzQnlDbGFzcyxcbiAgZmluZFRlcm1pbmFsTm9kZXNcbn07XG4iXX0=