'use strict';

function findNodeByClass(node, Class) {
  var foundNode = null;

  if (node instanceof Class) {
    foundNode = node;
  } else {
    var nodeNonTerminalNode = node.isNonTerminalNode();

    if (nodeNonTerminalNode) {
      var nonTerminalNode = node,
          ///
      childNodes = nonTerminalNode.getChildNodes();

      childNodes.some(function (childNode) {
        foundNode = findNodeByClass(childNode, Class);

        if (foundNode !== null) {
          return true;
        }
      });
    }
  }

  return foundNode;
}

function findNodesByClass(node, Class) {
  var foundNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (node instanceof Class) {
    var foundNode = node; ///

    foundNodes.push(foundNode);
  } else {
    var nodeNonTerminalNode = node.isNonTerminalNode();

    if (nodeNonTerminalNode) {
      var nonTerminalNode = node,
          ///
      childNodes = nonTerminalNode.getChildNodes();

      childNodes.forEach(function (childNode) {
        findNodesByClass(childNode, Class, foundNodes);
      });
    }
  }

  return foundNodes;
}

function findTerminalNodes(node) {
  var foundTerminalNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var foundTerminalNode = node; ///

    foundTerminalNodes.push(foundTerminalNode);
  } else {
    var nodeNonTerminalNode = node.isNonTerminalNode();

    if (nodeNonTerminalNode) {
      var nonTerminalNode = node,
          ///
      childNodes = nonTerminalNode.getChildNodes();

      childNodes.forEach(function (childNode) {
        findTerminalNodes(childNode, foundTerminalNodes);
      });
    }
  }

  return foundTerminalNodes;
}

module.exports = {
  findNodeByClass: findNodeByClass,
  findNodesByClass: findNodesByClass,
  findTerminalNodes: findTerminalNodes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbm9kZS5qcyJdLCJuYW1lcyI6WyJmaW5kTm9kZUJ5Q2xhc3MiLCJub2RlIiwiQ2xhc3MiLCJmb3VuZE5vZGUiLCJub2RlTm9uVGVybWluYWxOb2RlIiwiaXNOb25UZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGUiLCJjaGlsZE5vZGVzIiwiZ2V0Q2hpbGROb2RlcyIsInNvbWUiLCJjaGlsZE5vZGUiLCJmaW5kTm9kZXNCeUNsYXNzIiwiZm91bmROb2RlcyIsInB1c2giLCJmb3JFYWNoIiwiZmluZFRlcm1pbmFsTm9kZXMiLCJmb3VuZFRlcm1pbmFsTm9kZXMiLCJub2RlVGVybWluYWxOb2RlIiwiaXNUZXJtaW5hbE5vZGUiLCJmb3VuZFRlcm1pbmFsTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStCQyxLQUEvQixFQUFzQztBQUNwQyxNQUFJQyxZQUFZLElBQWhCOztBQUVBLE1BQUlGLGdCQUFnQkMsS0FBcEIsRUFBMkI7QUFDekJDLGdCQUFZRixJQUFaO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsUUFBTUcsc0JBQXNCSCxLQUFLSSxpQkFBTCxFQUE1Qjs7QUFFQSxRQUFJRCxtQkFBSixFQUF5QjtBQUN2QixVQUFNRSxrQkFBa0JMLElBQXhCO0FBQUEsVUFBOEI7QUFDeEJNLG1CQUFhRCxnQkFBZ0JFLGFBQWhCLEVBRG5COztBQUdBRCxpQkFBV0UsSUFBWCxDQUFnQixVQUFTQyxTQUFULEVBQW9CO0FBQ2xDUCxvQkFBWUgsZ0JBQWdCVSxTQUFoQixFQUEyQlIsS0FBM0IsQ0FBWjs7QUFFQSxZQUFJQyxjQUFjLElBQWxCLEVBQXdCO0FBQ3RCLGlCQUFPLElBQVA7QUFDRDtBQUNGLE9BTkQ7QUFPRDtBQUNGOztBQUVELFNBQU9BLFNBQVA7QUFDRDs7QUFFRCxTQUFTUSxnQkFBVCxDQUEwQlYsSUFBMUIsRUFBZ0NDLEtBQWhDLEVBQXdEO0FBQUEsTUFBakJVLFVBQWlCLHVFQUFKLEVBQUk7O0FBQ3RELE1BQUlYLGdCQUFnQkMsS0FBcEIsRUFBMkI7QUFDekIsUUFBTUMsWUFBWUYsSUFBbEIsQ0FEeUIsQ0FDRDs7QUFFeEJXLGVBQVdDLElBQVgsQ0FBZ0JWLFNBQWhCO0FBQ0QsR0FKRCxNQUlPO0FBQ0wsUUFBTUMsc0JBQXNCSCxLQUFLSSxpQkFBTCxFQUE1Qjs7QUFFQSxRQUFJRCxtQkFBSixFQUF5QjtBQUN2QixVQUFNRSxrQkFBa0JMLElBQXhCO0FBQUEsVUFBOEI7QUFDeEJNLG1CQUFhRCxnQkFBZ0JFLGFBQWhCLEVBRG5COztBQUdBRCxpQkFBV08sT0FBWCxDQUFtQixVQUFTSixTQUFULEVBQW9CO0FBQ3JDQyx5QkFBaUJELFNBQWpCLEVBQTRCUixLQUE1QixFQUFtQ1UsVUFBbkM7QUFDRCxPQUZEO0FBR0Q7QUFDRjs7QUFFRCxTQUFPQSxVQUFQO0FBQ0Q7O0FBRUQsU0FBU0csaUJBQVQsQ0FBMkJkLElBQTNCLEVBQTBEO0FBQUEsTUFBekJlLGtCQUF5Qix1RUFBSixFQUFJOztBQUN4RCxNQUFNQyxtQkFBbUJoQixLQUFLaUIsY0FBTCxFQUF6Qjs7QUFFQSxNQUFJRCxnQkFBSixFQUFzQjtBQUNwQixRQUFNRSxvQkFBb0JsQixJQUExQixDQURvQixDQUNZOztBQUVoQ2UsdUJBQW1CSCxJQUFuQixDQUF3Qk0saUJBQXhCO0FBQ0QsR0FKRCxNQUlPO0FBQ0wsUUFBTWYsc0JBQXNCSCxLQUFLSSxpQkFBTCxFQUE1Qjs7QUFFQSxRQUFJRCxtQkFBSixFQUF5QjtBQUN2QixVQUFNRSxrQkFBa0JMLElBQXhCO0FBQUEsVUFBOEI7QUFDeEJNLG1CQUFhRCxnQkFBZ0JFLGFBQWhCLEVBRG5COztBQUdBRCxpQkFBV08sT0FBWCxDQUFtQixVQUFTSixTQUFULEVBQW9CO0FBQ3JDSywwQkFBa0JMLFNBQWxCLEVBQTZCTSxrQkFBN0I7QUFDRCxPQUZEO0FBR0Q7QUFDRjs7QUFFRCxTQUFPQSxrQkFBUDtBQUNEOztBQUVESSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZyQixrQ0FEZTtBQUVmVyxvQ0FGZTtBQUdmSTtBQUhlLENBQWpCIiwiZmlsZSI6Im5vZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGZpbmROb2RlQnlDbGFzcyhub2RlLCBDbGFzcykge1xuICBsZXQgZm91bmROb2RlID0gbnVsbDtcblxuICBpZiAobm9kZSBpbnN0YW5jZW9mIENsYXNzKSB7XG4gICAgZm91bmROb2RlID0gbm9kZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gICAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG5vZGUsIC8vL1xuICAgICAgICAgICAgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICAgIGNoaWxkTm9kZXMuc29tZShmdW5jdGlvbihjaGlsZE5vZGUpIHtcbiAgICAgICAgZm91bmROb2RlID0gZmluZE5vZGVCeUNsYXNzKGNoaWxkTm9kZSwgQ2xhc3MpO1xuXG4gICAgICAgIGlmIChmb3VuZE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvdW5kTm9kZTtcbn1cblxuZnVuY3Rpb24gZmluZE5vZGVzQnlDbGFzcyhub2RlLCBDbGFzcywgZm91bmROb2RlcyA9IFtdKSB7XG4gIGlmIChub2RlIGluc3RhbmNlb2YgQ2xhc3MpIHtcbiAgICBjb25zdCBmb3VuZE5vZGUgPSBub2RlOyAvLy9cblxuICAgIGZvdW5kTm9kZXMucHVzaChmb3VuZE5vZGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgICBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKTtcblxuICAgICAgY2hpbGROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkTm9kZSkge1xuICAgICAgICBmaW5kTm9kZXNCeUNsYXNzKGNoaWxkTm9kZSwgQ2xhc3MsIGZvdW5kTm9kZXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvdW5kTm9kZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRUZXJtaW5hbE5vZGVzKG5vZGUsIGZvdW5kVGVybWluYWxOb2RlcyA9IFtdKSB7XG4gIGNvbnN0IG5vZGVUZXJtaW5hbE5vZGUgPSBub2RlLmlzVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVUZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBmb3VuZFRlcm1pbmFsTm9kZSA9IG5vZGU7IC8vL1xuXG4gICAgZm91bmRUZXJtaW5hbE5vZGVzLnB1c2goZm91bmRUZXJtaW5hbE5vZGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgICBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKTtcblxuICAgICAgY2hpbGROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkTm9kZSkge1xuICAgICAgICBmaW5kVGVybWluYWxOb2RlcyhjaGlsZE5vZGUsIGZvdW5kVGVybWluYWxOb2Rlcyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm91bmRUZXJtaW5hbE5vZGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZE5vZGVCeUNsYXNzLFxuICBmaW5kTm9kZXNCeUNsYXNzLFxuICBmaW5kVGVybWluYWxOb2Rlc1xufTtcbiJdfQ==