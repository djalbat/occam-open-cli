"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    versionFromNode: function() {
        return versionFromNode;
    },
    repositoryFromNode: function() {
        return repositoryFromNode;
    },
    dependenciesFromNode: function() {
        return dependenciesFromNode;
    },
    dependencyNamesFromNode: function() {
        return dependencyNamesFromNode;
    },
    default: function() {
        return _default;
    }
});
var _version = /*#__PURE__*/ _interopRequireDefault(require("../version"));
var _dependency = /*#__PURE__*/ _interopRequireDefault(require("../dependency"));
var _shortenedVersion = /*#__PURE__*/ _interopRequireDefault(require("../shortenedVersion"));
var _content = require("../utilities/content");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var dependencyNodesQuery = (0, _query.nodesQuery)("//dependencies/dependency"), repositoryTerminalNodeQuery = (0, _query.nodeQuery)("//repository!/@*!"), versionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//version!/versionNumber!/@*!"), dependencyNameTerminalNodeQuery = (0, _query.nodeQuery)("/dependency/name!/@*!"), shortenedVersionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//dependency/shortenedVersionNumber/@*!");
function versionFromNode(node) {
    var version = null;
    if (node !== null) {
        var versionNumberTerminalNode = versionNumberTerminalNodeQuery(node), versionNumberTerminalNodeContent = versionNumberTerminalNode.getContent(), versionNumber = (0, _content.trimDoubleQuotes)(versionNumberTerminalNodeContent); //
        version = _version.default.fromVersionNumber(versionNumber);
    }
    return version;
}
function repositoryFromNode(node) {
    var repository = null;
    if (node !== null) {
        var repositoryTerminalNode = repositoryTerminalNodeQuery(node), repositoryTerminalNodeContent = repositoryTerminalNode.getContent();
        repository = (0, _content.trimDoubleQuotes)(repositoryTerminalNodeContent); //
    }
    return repository;
}
function dependenciesFromNode(node) {
    var dependencies = [];
    if (node !== null) {
        var dependencyNodes = dependencyNodesQuery(node);
        dependencyNodes.forEach(function(dependencyNode) {
            var dependencyNameTerminalNode = dependencyNameTerminalNodeQuery(dependencyNode), shortenedVersionNumberTerminalNode = shortenedVersionNumberTerminalNodeQuery(dependencyNode), dependencyNameTerminalNodeContent = dependencyNameTerminalNode.getContent(), shortenedVersionNumberTerminalNodeContent = shortenedVersionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(shortenedVersionNumberTerminalNodeContent), name = (0, _content.trimDoubleQuotes)(dependencyNameTerminalNodeContent), shortenedVersion = _shortenedVersion.default.fromString(string), dependency = _dependency.default.fromNameAndShortenedVersion(name, shortenedVersion);
            dependencies.push(dependency);
        });
    }
    return dependencies;
}
function dependencyNamesFromNode(node) {
    var dependencies = this.dependenciesFromNode(node), dependencyNames = dependencies.map(function(dependency) {
        var dependencyName = dependency.getName();
        return dependencyName;
    });
    return dependencyNames;
}
var _default = {
    versionFromNode: versionFromNode,
    repositoryFromNode: repositoryFromNode,
    dependenciesFromNode: dependenciesFromNode,
    dependencyNamesFromNode: dependencyNamesFromNode
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YUpTT04uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBWZXJzaW9uIGZyb20gXCIuLi92ZXJzaW9uXCI7XG5pbXBvcnQgRGVwZW5kZW5jeSBmcm9tIFwiLi4vZGVwZW5kZW5jeVwiO1xuaW1wb3J0IFNob3J0ZW5lZFZlcnNpb24gZnJvbSBcIi4uL3Nob3J0ZW5lZFZlcnNpb25cIjtcblxuaW1wb3J0IHsgdHJpbURvdWJsZVF1b3RlcyB9IGZyb20gXCIuLi91dGlsaXRpZXMvY29udGVudFwiO1xuaW1wb3J0IHsgbm9kZVF1ZXJ5LCBub2Rlc1F1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBkZXBlbmRlbmN5Tm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvL2RlcGVuZGVuY2llcy9kZXBlbmRlbmN5XCIpLFxuICAgICAgcmVwb3NpdG9yeVRlcm1pbmFsTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiLy9yZXBvc2l0b3J5IS9AKiFcIiksXG4gICAgICB2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvL3ZlcnNpb24hL3ZlcnNpb25OdW1iZXIhL0AqIVwiKSxcbiAgICAgIGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvZGVwZW5kZW5jeS9uYW1lIS9AKiFcIiksXG4gICAgICBzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvL2RlcGVuZGVuY3kvc2hvcnRlbmVkVmVyc2lvbk51bWJlci9AKiFcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJzaW9uRnJvbU5vZGUobm9kZSkge1xuICBsZXQgdmVyc2lvbiA9IG51bGw7XG5cbiAgaWYgKG5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCB2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlID0gdmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZVF1ZXJ5KG5vZGUpLFxuICAgICAgICAgIHZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVDb250ZW50ID0gdmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgICAgdmVyc2lvbk51bWJlciA9IHRyaW1Eb3VibGVRdW90ZXModmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZUNvbnRlbnQpOyAvL1xuXG4gICAgdmVyc2lvbiA9IFZlcnNpb24uZnJvbVZlcnNpb25OdW1iZXIodmVyc2lvbk51bWJlcik7XG4gIH1cblxuICByZXR1cm4gdmVyc2lvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcG9zaXRvcnlGcm9tTm9kZShub2RlKSB7XG4gIGxldCByZXBvc2l0b3J5ID0gbnVsbDtcblxuICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJlcG9zaXRvcnlUZXJtaW5hbE5vZGUgPSByZXBvc2l0b3J5VGVybWluYWxOb2RlUXVlcnkobm9kZSksXG4gICAgICAgICAgcmVwb3NpdG9yeVRlcm1pbmFsTm9kZUNvbnRlbnQgPSByZXBvc2l0b3J5VGVybWluYWxOb2RlLmdldENvbnRlbnQoKTtcblxuICAgIHJlcG9zaXRvcnkgPSB0cmltRG91YmxlUXVvdGVzKHJlcG9zaXRvcnlUZXJtaW5hbE5vZGVDb250ZW50KTsgLy9cbiAgfVxuXG4gIHJldHVybiByZXBvc2l0b3J5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVwZW5kZW5jaWVzRnJvbU5vZGUobm9kZSkge1xuICBjb25zdCBkZXBlbmRlbmNpZXMgPSBbXTtcblxuICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRlcGVuZGVuY3lOb2RlcyA9IGRlcGVuZGVuY3lOb2Rlc1F1ZXJ5KG5vZGUpO1xuXG4gICAgZGVwZW5kZW5jeU5vZGVzLmZvckVhY2goKGRlcGVuZGVuY3lOb2RlKSA9PiB7XG4gICAgICBjb25zdCBkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZSA9IGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlUXVlcnkoZGVwZW5kZW5jeU5vZGUpLFxuICAgICAgICAgICAgc2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZSA9IHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVRdWVyeShkZXBlbmRlbmN5Tm9kZSksXG4gICAgICAgICAgICBkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZUNvbnRlbnQgPSBkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgICAgICBzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCA9IHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpLFxuICAgICAgICAgICAgc3RyaW5nID0gdHJpbURvdWJsZVF1b3RlcyhzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCksICAvLy9cbiAgICAgICAgICAgIG5hbWUgPSB0cmltRG91YmxlUXVvdGVzKGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlQ29udGVudCksLy8vXG4gICAgICAgICAgICBzaG9ydGVuZWRWZXJzaW9uID0gU2hvcnRlbmVkVmVyc2lvbi5mcm9tU3RyaW5nKHN0cmluZyksXG4gICAgICAgICAgICBkZXBlbmRlbmN5ID0gRGVwZW5kZW5jeS5mcm9tTmFtZUFuZFNob3J0ZW5lZFZlcnNpb24obmFtZSwgc2hvcnRlbmVkVmVyc2lvbik7XG5cbiAgICAgIGRlcGVuZGVuY2llcy5wdXNoKGRlcGVuZGVuY3kpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlcGVuZGVuY3lOYW1lc0Zyb21Ob2RlKG5vZGUpIHtcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gdGhpcy5kZXBlbmRlbmNpZXNGcm9tTm9kZShub2RlKSxcbiAgICAgICAgZGVwZW5kZW5jeU5hbWVzID0gZGVwZW5kZW5jaWVzLm1hcCgoZGVwZW5kZW5jeSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlcGVuZGVuY3lOYW1lID0gZGVwZW5kZW5jeS5nZXROYW1lKCk7XG5cbiAgICAgICAgICByZXR1cm4gZGVwZW5kZW5jeU5hbWU7XG4gICAgICAgIH0pXG5cbiAgcmV0dXJuIGRlcGVuZGVuY3lOYW1lcztcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICB2ZXJzaW9uRnJvbU5vZGUsXG4gIHJlcG9zaXRvcnlGcm9tTm9kZSxcbiAgZGVwZW5kZW5jaWVzRnJvbU5vZGUsXG4gIGRlcGVuZGVuY3lOYW1lc0Zyb21Ob2RlXG59O1xuIl0sIm5hbWVzIjpbInZlcnNpb25Gcm9tTm9kZSIsInJlcG9zaXRvcnlGcm9tTm9kZSIsImRlcGVuZGVuY2llc0Zyb21Ob2RlIiwiZGVwZW5kZW5jeU5hbWVzRnJvbU5vZGUiLCJkZXBlbmRlbmN5Tm9kZXNRdWVyeSIsIm5vZGVzUXVlcnkiLCJyZXBvc2l0b3J5VGVybWluYWxOb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkiLCJkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZVF1ZXJ5Iiwic2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZVF1ZXJ5Iiwibm9kZSIsInZlcnNpb24iLCJ2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlIiwidmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZUNvbnRlbnQiLCJnZXRDb250ZW50IiwidmVyc2lvbk51bWJlciIsInRyaW1Eb3VibGVRdW90ZXMiLCJWZXJzaW9uIiwiZnJvbVZlcnNpb25OdW1iZXIiLCJyZXBvc2l0b3J5IiwicmVwb3NpdG9yeVRlcm1pbmFsTm9kZSIsInJlcG9zaXRvcnlUZXJtaW5hbE5vZGVDb250ZW50IiwiZGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jeU5vZGVzIiwiZm9yRWFjaCIsImRlcGVuZGVuY3lOb2RlIiwiZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGUiLCJzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlIiwiZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGVDb250ZW50Iiwic2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZUNvbnRlbnQiLCJzdHJpbmciLCJuYW1lIiwic2hvcnRlbmVkVmVyc2lvbiIsIlNob3J0ZW5lZFZlcnNpb24iLCJmcm9tU3RyaW5nIiwiZGVwZW5kZW5jeSIsIkRlcGVuZGVuY3kiLCJmcm9tTmFtZUFuZFNob3J0ZW5lZFZlcnNpb24iLCJwdXNoIiwiZGVwZW5kZW5jeU5hbWVzIiwibWFwIiwiZGVwZW5kZW5jeU5hbWUiLCJnZXROYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFlZ0JBLGVBQWU7ZUFBZkE7O0lBY0FDLGtCQUFrQjtlQUFsQkE7O0lBYUFDLG9CQUFvQjtlQUFwQkE7O0lBdUJBQyx1QkFBdUI7ZUFBdkJBOztJQVdoQixPQUtFO2VBTEY7Ozs0REExRW9COytEQUNHO3FFQUNNO3VCQUVJO3FCQUNLOzs7Ozs7QUFFdEMsSUFBTUMsdUJBQXVCQyxJQUFBQSxpQkFBVSxFQUFDLDhCQUNsQ0MsOEJBQThCQyxJQUFBQSxnQkFBUyxFQUFDLHNCQUN4Q0MsaUNBQWlDRCxJQUFBQSxnQkFBUyxFQUFDLGtDQUMzQ0Usa0NBQWtDRixJQUFBQSxnQkFBUyxFQUFDLDBCQUM1Q0csMENBQTBDSCxJQUFBQSxnQkFBUyxFQUFDO0FBRW5ELFNBQVNQLGdCQUFnQlcsSUFBSSxFQUFFO0lBQ3BDLElBQUlDLFVBQVUsSUFBSTtJQUVsQixJQUFJRCxTQUFTLElBQUksRUFBRTtRQUNqQixJQUFNRSw0QkFBNEJMLCtCQUErQkcsT0FDM0RHLG1DQUFtQ0QsMEJBQTBCRSxVQUFVLElBQ3ZFQyxnQkFBZ0JDLElBQUFBLHlCQUFnQixFQUFDSCxtQ0FBbUMsRUFBRTtRQUU1RUYsVUFBVU0sZ0JBQU8sQ0FBQ0MsaUJBQWlCLENBQUNIO0lBQ3RDLENBQUM7SUFFRCxPQUFPSjtBQUNUO0FBRU8sU0FBU1gsbUJBQW1CVSxJQUFJLEVBQUU7SUFDdkMsSUFBSVMsYUFBYSxJQUFJO0lBRXJCLElBQUlULFNBQVMsSUFBSSxFQUFFO1FBQ2pCLElBQU1VLHlCQUF5QmYsNEJBQTRCSyxPQUNyRFcsZ0NBQWdDRCx1QkFBdUJOLFVBQVU7UUFFdkVLLGFBQWFILElBQUFBLHlCQUFnQixFQUFDSyxnQ0FBZ0MsRUFBRTtJQUNsRSxDQUFDO0lBRUQsT0FBT0Y7QUFDVDtBQUVPLFNBQVNsQixxQkFBcUJTLElBQUksRUFBRTtJQUN6QyxJQUFNWSxlQUFlLEVBQUU7SUFFdkIsSUFBSVosU0FBUyxJQUFJLEVBQUU7UUFDakIsSUFBTWEsa0JBQWtCcEIscUJBQXFCTztRQUU3Q2EsZ0JBQWdCQyxPQUFPLENBQUMsU0FBQ0MsZ0JBQW1CO1lBQzFDLElBQU1DLDZCQUE2QmxCLGdDQUFnQ2lCLGlCQUM3REUscUNBQXFDbEIsd0NBQXdDZ0IsaUJBQzdFRyxvQ0FBb0NGLDJCQUEyQlosVUFBVSxJQUN6RWUsNENBQTRDRixtQ0FBbUNiLFVBQVUsSUFDekZnQixTQUFTZCxJQUFBQSx5QkFBZ0IsRUFBQ2EsNENBQzFCRSxPQUFPZixJQUFBQSx5QkFBZ0IsRUFBQ1ksb0NBQ3hCSSxtQkFBbUJDLHlCQUFnQixDQUFDQyxVQUFVLENBQUNKLFNBQy9DSyxhQUFhQyxtQkFBVSxDQUFDQywyQkFBMkIsQ0FBQ04sTUFBTUM7WUFFaEVWLGFBQWFnQixJQUFJLENBQUNIO1FBQ3BCO0lBQ0YsQ0FBQztJQUVELE9BQU9iO0FBQ1Q7QUFFTyxTQUFTcEIsd0JBQXdCUSxJQUFJLEVBQUU7SUFDNUMsSUFBTVksZUFBZSxJQUFJLENBQUNyQixvQkFBb0IsQ0FBQ1MsT0FDekM2QixrQkFBa0JqQixhQUFha0IsR0FBRyxDQUFDLFNBQUNMLFlBQWU7UUFDakQsSUFBTU0saUJBQWlCTixXQUFXTyxPQUFPO1FBRXpDLE9BQU9EO0lBQ1Q7SUFFTixPQUFPRjtBQUNUO0lBRUEsV0FBZTtJQUNieEMsaUJBQUFBO0lBQ0FDLG9CQUFBQTtJQUNBQyxzQkFBQUE7SUFDQUMseUJBQUFBO0FBQ0YifQ==