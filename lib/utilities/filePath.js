'use strict';

var readmeFilePathPattern = '^(?:[^\\/]+\\/){1}README\\.md$',
    florenceFilePathPattern = '^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$',
    metaJSONFilePathPattern = '^(?:[^\\/]+\\/){1}meta\\.json$',
    customGrammarBNFFilePathPattern = '^(?:[^\\/]+\\/){1}(term|expression|statement|metastatement)\\.bnf$',
    customGrammarLexicalPatternFilePathPattern = '^(?:[^\\/]+\\/){1}pattern\\.lex$',
    recognisedFilePathPattern = "".concat(readmeFilePathPattern, "|").concat(florenceFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarLexicalPatternFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern),
    florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern),
    metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern),
    recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern),
    customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern),
    customGrammarLexicalPatternFilePathRegularExpression = new RegExp(customGrammarLexicalPatternFilePathPattern);

function isFilePathReadmeFilePath(filePath) {
  return readmeFilePathRegularExpression.test(filePath);
}

function isFilePathFlorenceFilePath(filePath) {
  return florenceFilePathRegularExpression.test(filePath);
}

function isFilePathMetaJSONFilePath(filePath) {
  return metaJSONFilePathRegularExpression.test(filePath);
}

function isFilePathRecognisedFilePath(filePath) {
  return recognisedFilePathRegularExpression.test(filePath);
}

function isFilePathCustomGrammarBNFFilePath(filePath) {
  return customGrammarBNFFilePathRegularExpression.test(filePath);
}

function isFilePathCustomGrammarLexicalPatternFilePath(filePath) {
  return customGrammarLexicalPatternFilePathRegularExpression.test(filePath);
}

module.exports = {
  isFilePathReadmeFilePath: isFilePathReadmeFilePath,
  isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
  isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
  isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
  isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
  isFilePathCustomGrammarLexicalPatternFilePath: isFilePathCustomGrammarLexicalPatternFilePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGVQYXRoLmpzIl0sIm5hbWVzIjpbInJlYWRtZUZpbGVQYXRoUGF0dGVybiIsImZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuIiwibWV0YUpTT05GaWxlUGF0aFBhdHRlcm4iLCJjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuIiwicmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiIsInJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJSZWdFeHAiLCJmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJyZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCIsImZpbGVQYXRoIiwidGVzdCIsImlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoIiwiaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgiLCJpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoIiwiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLHFCQUFxQixHQUFHLGdDQUE5QjtBQUFBLElBQ01DLHVCQUF1QixHQUFHLG1DQURoQztBQUFBLElBRU1DLHVCQUF1QixHQUFHLGdDQUZoQztBQUFBLElBR01DLCtCQUErQixHQUFHLG9FQUh4QztBQUFBLElBSU1DLDBDQUEwQyxHQUFHLGtDQUpuRDtBQUFBLElBS01DLHlCQUF5QixhQUFNTCxxQkFBTixjQUErQkMsdUJBQS9CLGNBQTBEQyx1QkFBMUQsY0FBcUZDLCtCQUFyRixjQUF3SEMsMENBQXhILENBTC9CO0FBT0EsSUFBTUUsK0JBQStCLEdBQUcsSUFBSUMsTUFBSixDQUFXUCxxQkFBWCxDQUF4QztBQUFBLElBQ01RLGlDQUFpQyxHQUFHLElBQUlELE1BQUosQ0FBV04sdUJBQVgsQ0FEMUM7QUFBQSxJQUVNUSxpQ0FBaUMsR0FBRyxJQUFJRixNQUFKLENBQVdMLHVCQUFYLENBRjFDO0FBQUEsSUFHTVEsbUNBQW1DLEdBQUcsSUFBSUgsTUFBSixDQUFXRix5QkFBWCxDQUg1QztBQUFBLElBSU1NLHlDQUF5QyxHQUFHLElBQUlKLE1BQUosQ0FBV0osK0JBQVgsQ0FKbEQ7QUFBQSxJQUtNUyxvREFBb0QsR0FBRyxJQUFJTCxNQUFKLENBQVdILDBDQUFYLENBTDdEOztBQU9BLFNBQVNTLHdCQUFULENBQWtDQyxRQUFsQyxFQUE0QztBQUFFLFNBQU9SLCtCQUErQixDQUFDUyxJQUFoQyxDQUFxQ0QsUUFBckMsQ0FBUDtBQUF3RDs7QUFFdEcsU0FBU0UsMEJBQVQsQ0FBb0NGLFFBQXBDLEVBQThDO0FBQUUsU0FBT04saUNBQWlDLENBQUNPLElBQWxDLENBQXVDRCxRQUF2QyxDQUFQO0FBQTBEOztBQUUxRyxTQUFTRywwQkFBVCxDQUFvQ0gsUUFBcEMsRUFBOEM7QUFBRSxTQUFPTCxpQ0FBaUMsQ0FBQ00sSUFBbEMsQ0FBdUNELFFBQXZDLENBQVA7QUFBMEQ7O0FBRTFHLFNBQVNJLDRCQUFULENBQXNDSixRQUF0QyxFQUFnRDtBQUFFLFNBQU9KLG1DQUFtQyxDQUFDSyxJQUFwQyxDQUF5Q0QsUUFBekMsQ0FBUDtBQUE0RDs7QUFFOUcsU0FBU0ssa0NBQVQsQ0FBNENMLFFBQTVDLEVBQXNEO0FBQUUsU0FBT0gseUNBQXlDLENBQUNJLElBQTFDLENBQStDRCxRQUEvQyxDQUFQO0FBQWtFOztBQUUxSCxTQUFTTSw2Q0FBVCxDQUF1RE4sUUFBdkQsRUFBaUU7QUFBRSxTQUFPRixvREFBb0QsQ0FBQ0csSUFBckQsQ0FBMERELFFBQTFELENBQVA7QUFBNkU7O0FBRWhKTyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZlQsRUFBQUEsd0JBQXdCLEVBQXhCQSx3QkFEZTtBQUVmRyxFQUFBQSwwQkFBMEIsRUFBMUJBLDBCQUZlO0FBR2ZDLEVBQUFBLDBCQUEwQixFQUExQkEsMEJBSGU7QUFJZkMsRUFBQUEsNEJBQTRCLEVBQTVCQSw0QkFKZTtBQUtmQyxFQUFBQSxrQ0FBa0MsRUFBbENBLGtDQUxlO0FBTWZDLEVBQUFBLDZDQUE2QyxFQUE3Q0E7QUFOZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHJlYWRtZUZpbGVQYXRoUGF0dGVybiA9ICdeKD86W15cXFxcL10rXFxcXC8pezF9UkVBRE1FXFxcXC5tZCQnLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiA9ICdeKD86W15cXFxcL10rXFxcXC8pezEsfVteXFxcXC5dK1xcXFwuZmxzJCcsXHJcbiAgICAgIG1ldGFKU09ORmlsZVBhdGhQYXR0ZXJuID0gJ14oPzpbXlxcXFwvXStcXFxcLyl7MX1tZXRhXFxcXC5qc29uJCcsXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4gPSAnXig/OlteXFxcXC9dK1xcXFwvKXsxfSh0ZXJtfGV4cHJlc3Npb258c3RhdGVtZW50fG1ldGFzdGF0ZW1lbnQpXFxcXC5ibmYkJyxcclxuICAgICAgY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuID0gJ14oPzpbXlxcXFwvXStcXFxcLyl7MX1wYXR0ZXJuXFxcXC5sZXgkJyxcclxuICAgICAgcmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiA9IGAke3JlYWRtZUZpbGVQYXRoUGF0dGVybn18JHtmbG9yZW5jZUZpbGVQYXRoUGF0dGVybn18JHttZXRhSlNPTkZpbGVQYXRoUGF0dGVybn18JHtjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJufXwke2N1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoUGF0dGVybn1gO1xyXG5cclxuY29uc3QgcmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVhZG1lRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIG1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAobWV0YUpTT05GaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuKTtcclxuXHJcbmZ1bmN0aW9uIGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gcmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZnVuY3Rpb24gaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGZsb3JlbmNlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZnVuY3Rpb24gaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIG1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZnVuY3Rpb24gaXNGaWxlUGF0aFJlY29nbmlzZWRGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gcmVjb2duaXNlZEZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmZ1bmN0aW9uIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5mdW5jdGlvbiBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGN1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoXHJcbn07XHJcbiJdfQ==