'use strict';

var readmeFilePathPattern = '^(?:[^\\/]+\\/){1}README\\.md$',
    florenceFilePathPattern = '^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$',
    metaJSONFilePathPattern = '^(?:[^\\/]+\\/){1}meta\\.json$',
    customGrammarBNFFilePathPattern = '^(?:[^\\/]+\\/){1}(term|expression|statement|metastatement)\\.bnf$',
    customGrammarLexicalPatternFilePathPattern = '^(?:[^\\/]+\\/){1}pattern\\.lex$',
    recognisedFilePathPattern = readmeFilePathPattern + '|' + florenceFilePathPattern + '|' + metaJSONFilePathPattern + '|' + customGrammarBNFFilePathPattern + '|' + customGrammarLexicalPatternFilePathPattern;

var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern),
    florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern),
    metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern),
    recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern),
    customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern),
    customGrammarLexicalPatternFilePathRegularExpression = new RegExp(customGrammarLexicalPatternFilePathPattern);

function isFilePathReadmeFilePath(filePath) {
      return readmeFilePathRegularExpression.test(filePath);
}

function isFilePathFlorenceFilePath(filePath) {
      return florenceFilePathRegularExpression.test(filePath);
}

function isFilePathMetaJSONFilePath(filePath) {
      return metaJSONFilePathRegularExpression.test(filePath);
}

function isFilePathRecognisedFilePath(filePath) {
      return recognisedFilePathRegularExpression.test(filePath);
}

function isFilePathCustomGrammarBNFFilePath(filePath) {
      return customGrammarBNFFilePathRegularExpression.test(filePath);
}

function isFilePathCustomGrammarLexicalPatternFilePath(filePath) {
      return customGrammarLexicalPatternFilePathRegularExpression.test(filePath);
}

module.exports = {
      isFilePathReadmeFilePath: isFilePathReadmeFilePath,
      isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
      isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
      isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
      isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
      isFilePathCustomGrammarLexicalPatternFilePath: isFilePathCustomGrammarLexicalPatternFilePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVBhdGguanMiXSwibmFtZXMiOlsicmVhZG1lRmlsZVBhdGhQYXR0ZXJuIiwiZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm4iLCJtZXRhSlNPTkZpbGVQYXRoUGF0dGVybiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4iLCJjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFBhdHRlcm4iLCJyZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuIiwicmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsIlJlZ0V4cCIsImZsb3JlbmNlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsIm1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsInJlY29nbmlzZWRGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwiZmlsZVBhdGgiLCJ0ZXN0IiwiaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgiLCJpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCIsImlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgiLCJpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoIiwiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsd0JBQXdCLGdDQUE5QjtBQUFBLElBQ01DLDBCQUEwQixtQ0FEaEM7QUFBQSxJQUVNQywwQkFBMEIsZ0NBRmhDO0FBQUEsSUFHTUMsa0NBQWtDLG9FQUh4QztBQUFBLElBSU1DLDZDQUE2QyxrQ0FKbkQ7QUFBQSxJQUtNQyw0QkFBK0JMLHFCQUEvQixTQUF3REMsdUJBQXhELFNBQW1GQyx1QkFBbkYsU0FBOEdDLCtCQUE5RyxTQUFpSkMsMENBTHZKOztBQU9BLElBQU1FLGtDQUFrQyxJQUFJQyxNQUFKLENBQVdQLHFCQUFYLENBQXhDO0FBQUEsSUFDTVEsb0NBQW9DLElBQUlELE1BQUosQ0FBV04sdUJBQVgsQ0FEMUM7QUFBQSxJQUVNUSxvQ0FBb0MsSUFBSUYsTUFBSixDQUFXTCx1QkFBWCxDQUYxQztBQUFBLElBR01RLHNDQUFzQyxJQUFJSCxNQUFKLENBQVdGLHlCQUFYLENBSDVDO0FBQUEsSUFJTU0sNENBQTRDLElBQUlKLE1BQUosQ0FBV0osK0JBQVgsQ0FKbEQ7QUFBQSxJQUtNUyx1REFBdUQsSUFBSUwsTUFBSixDQUFXSCwwQ0FBWCxDQUw3RDs7QUFPQSxTQUFTUyx3QkFBVCxDQUFrQ0MsUUFBbEMsRUFBNEM7QUFBRSxhQUFPUixnQ0FBZ0NTLElBQWhDLENBQXFDRCxRQUFyQyxDQUFQO0FBQXdEOztBQUV0RyxTQUFTRSwwQkFBVCxDQUFvQ0YsUUFBcEMsRUFBOEM7QUFBRSxhQUFPTixrQ0FBa0NPLElBQWxDLENBQXVDRCxRQUF2QyxDQUFQO0FBQTBEOztBQUUxRyxTQUFTRywwQkFBVCxDQUFvQ0gsUUFBcEMsRUFBOEM7QUFBRSxhQUFPTCxrQ0FBa0NNLElBQWxDLENBQXVDRCxRQUF2QyxDQUFQO0FBQTBEOztBQUUxRyxTQUFTSSw0QkFBVCxDQUFzQ0osUUFBdEMsRUFBZ0Q7QUFBRSxhQUFPSixvQ0FBb0NLLElBQXBDLENBQXlDRCxRQUF6QyxDQUFQO0FBQTREOztBQUU5RyxTQUFTSyxrQ0FBVCxDQUE0Q0wsUUFBNUMsRUFBc0Q7QUFBRSxhQUFPSCwwQ0FBMENJLElBQTFDLENBQStDRCxRQUEvQyxDQUFQO0FBQWtFOztBQUUxSCxTQUFTTSw2Q0FBVCxDQUF1RE4sUUFBdkQsRUFBaUU7QUFBRSxhQUFPRixxREFBcURHLElBQXJELENBQTBERCxRQUExRCxDQUFQO0FBQTZFOztBQUVoSk8sT0FBT0MsT0FBUCxHQUFpQjtBQUNmVCx3REFEZTtBQUVmRyw0REFGZTtBQUdmQyw0REFIZTtBQUlmQyxnRUFKZTtBQUtmQyw0RUFMZTtBQU1mQztBQU5lLENBQWpCIiwiZmlsZSI6ImZpbGVQYXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgcmVhZG1lRmlsZVBhdGhQYXR0ZXJuID0gJ14oPzpbXlxcXFwvXStcXFxcLyl7MX1SRUFETUVcXFxcLm1kJCcsXHJcbiAgICAgIGZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuID0gJ14oPzpbXlxcXFwvXStcXFxcLyl7MSx9W15cXFxcLl0rXFxcXC5mbHMkJyxcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFBhdHRlcm4gPSAnXig/OlteXFxcXC9dK1xcXFwvKXsxfW1ldGFcXFxcLmpzb24kJyxcclxuICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybiA9ICdeKD86W15cXFxcL10rXFxcXC8pezF9KHRlcm18ZXhwcmVzc2lvbnxzdGF0ZW1lbnR8bWV0YXN0YXRlbWVudClcXFxcLmJuZiQnLFxyXG4gICAgICBjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFBhdHRlcm4gPSAnXig/OlteXFxcXC9dK1xcXFwvKXsxfXBhdHRlcm5cXFxcLmxleCQnLFxyXG4gICAgICByZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuID0gYCR7cmVhZG1lRmlsZVBhdGhQYXR0ZXJufXwke2Zsb3JlbmNlRmlsZVBhdGhQYXR0ZXJufXwke21ldGFKU09ORmlsZVBhdGhQYXR0ZXJufXwke2N1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm59fCR7Y3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJufWA7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChyZWFkbWVGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChtZXRhSlNPTkZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIHJlY29nbmlzZWRGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChyZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFBhdHRlcm4pO1xyXG5cclxuZnVuY3Rpb24gaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5mdW5jdGlvbiBpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5mdW5jdGlvbiBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gbWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5mdW5jdGlvbiBpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZnVuY3Rpb24gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmZ1bmN0aW9uIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhcclxufTtcclxuIl19