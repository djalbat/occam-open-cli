"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isFilePathReadmeFilePath: function() {
        return isFilePathReadmeFilePath;
    },
    isFilePathFlorenceFilePath: function() {
        return isFilePathFlorenceFilePath;
    },
    isFilePathMetaJSONFilePath: function() {
        return isFilePathMetaJSONFilePath;
    },
    isFilePathRecognisedFilePath: function() {
        return isFilePathRecognisedFilePath;
    },
    isFilePathCustomGrammarBNFFilePath: function() {
        return isFilePathCustomGrammarBNFFilePath;
    },
    isFilePathCustomGrammarPatternFilePath: function() {
        return isFilePathCustomGrammarPatternFilePath;
    },
    default: function() {
        return _default;
    }
});
var readmeFilePathPattern = "^(?:[^\\/]+\\/){1}README\\.md$", florenceFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$", metaJSONFilePathPattern = "^(?:[^\\/]+\\/){1}meta\\.json$", customGrammarBNFFilePathPattern = "^(?:[^\\/]+\\/){1}(term|statement|metastatement)\\.bnf$", customGrammarPatternFilePathPattern = "^(?:[^\\/]+\\/){1}(type|operator)\\.ptn$", recognisedFilePathPattern = "".concat(readmeFilePathPattern, "|").concat(florenceFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarPatternFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern), florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern), metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern), recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern), customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern), customGrammarPatternFilePathRegularExpression = new RegExp(customGrammarPatternFilePathPattern);
function isFilePathReadmeFilePath(filePath) {
    return readmeFilePathRegularExpression.test(filePath);
}
function isFilePathFlorenceFilePath(filePath) {
    return florenceFilePathRegularExpression.test(filePath);
}
function isFilePathMetaJSONFilePath(filePath) {
    return metaJSONFilePathRegularExpression.test(filePath);
}
function isFilePathRecognisedFilePath(filePath) {
    return recognisedFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarBNFFilePath(filePath) {
    return customGrammarBNFFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarPatternFilePath(filePath) {
    return customGrammarPatternFilePathRegularExpression.test(filePath);
}
var _default = {
    isFilePathReadmeFilePath: isFilePathReadmeFilePath,
    isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
    isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
    isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
    isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
    isFilePathCustomGrammarPatternFilePath: isFilePathCustomGrammarPatternFilePath
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1SRUFETUVcXFxcLm1kJFwiLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1bXlxcXFwuXStcXFxcLmZscyRcIixcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1tZXRhXFxcXC5qc29uJFwiLFxyXG4gICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9KHRlcm18c3RhdGVtZW50fG1ldGFzdGF0ZW1lbnQpXFxcXC5ibmYkXCIsXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9KHR5cGV8b3BlcmF0b3IpXFxcXC5wdG4kXCIsXHJcbiAgICAgIHJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4gPSBgJHtyZWFkbWVGaWxlUGF0aFBhdHRlcm59fCR7ZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm59fCR7bWV0YUpTT05GaWxlUGF0aFBhdHRlcm59fCR7Y3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybn18JHtjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoUGF0dGVybn1gO1xyXG5cclxuY29uc3QgcmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVhZG1lRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIG1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAobWV0YUpTT05GaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoUGF0dGVybik7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGZsb3JlbmNlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiBtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhcclxufTtcclxuIl0sIm5hbWVzIjpbImlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCIsImlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoIiwiaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgiLCJpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoIiwiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoIiwicmVhZG1lRmlsZVBhdGhQYXR0ZXJuIiwiZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm4iLCJtZXRhSlNPTkZpbGVQYXRoUGF0dGVybiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4iLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoUGF0dGVybiIsInJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4iLCJyZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiUmVnRXhwIiwiZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwibWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwicmVjb2duaXNlZEZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImZpbGVQYXRoIiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7Ozs7OztJQWdCR0Esd0JBQXdCO2VBQXhCQSx3QkFBd0I7O0lBRXhCQywwQkFBMEI7ZUFBMUJBLDBCQUEwQjs7SUFFMUJDLDBCQUEwQjtlQUExQkEsMEJBQTBCOztJQUUxQkMsNEJBQTRCO2VBQTVCQSw0QkFBNEI7O0lBRTVCQyxrQ0FBa0M7ZUFBbENBLGtDQUFrQzs7SUFFbENDLHNDQUFzQztlQUF0Q0Esc0NBQXNDOztJQUV0RCxPQU9FO2VBUEYsUUFPRTs7O0FBakNGLElBQU1DLHFCQUFxQixHQUFHLGdDQUFnQyxFQUN4REMsdUJBQXVCLEdBQUcsbUNBQW1DLEVBQzdEQyx1QkFBdUIsR0FBRyxnQ0FBZ0MsRUFDMURDLCtCQUErQixHQUFHLHlEQUF5RCxFQUMzRkMsbUNBQW1DLEdBQUcsMENBQTBDLEVBQ2hGQyx5QkFBeUIsR0FBRyxBQUFDLEVBQUEsQ0FBMkJKLE1BQXVCLENBQWhERCxxQkFBcUIsRUFBQyxHQUFDLENBQTBCLENBQUdFLE1BQXVCLENBQWxERCx1QkFBdUIsRUFBQyxHQUFDLENBQTBCLENBQUdFLE1BQStCLENBQTFERCx1QkFBdUIsRUFBQyxHQUFDLENBQWtDLENBQUdFLE1BQW1DLENBQXRFRCwrQkFBK0IsRUFBQyxHQUFDLENBQXNDLENBQUEsTUFBQSxDQUFwQ0MsbUNBQW1DLENBQUUsQUFBQztBQUU3TCxJQUFNRSwrQkFBK0IsR0FBRyxJQUFJQyxNQUFNLENBQUNQLHFCQUFxQixDQUFDLEVBQ25FUSxpQ0FBaUMsR0FBRyxJQUFJRCxNQUFNLENBQUNOLHVCQUF1QixDQUFDLEVBQ3ZFUSxpQ0FBaUMsR0FBRyxJQUFJRixNQUFNLENBQUNMLHVCQUF1QixDQUFDLEVBQ3ZFUSxtQ0FBbUMsR0FBRyxJQUFJSCxNQUFNLENBQUNGLHlCQUF5QixDQUFDLEVBQzNFTSx5Q0FBeUMsR0FBRyxJQUFJSixNQUFNLENBQUNKLCtCQUErQixDQUFDLEVBQ3ZGUyw2Q0FBNkMsR0FBRyxJQUFJTCxNQUFNLENBQUNILG1DQUFtQyxDQUFDLEFBQUM7QUFFL0YsU0FBU1Ysd0JBQXdCLENBQUNtQixRQUFRLEVBQUU7SUFBRSxPQUFPUCwrQkFBK0IsQ0FBQ1EsSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQztBQUFDLENBQUM7QUFFdEcsU0FBU2xCLDBCQUEwQixDQUFDa0IsUUFBUSxFQUFFO0lBQUUsT0FBT0wsaUNBQWlDLENBQUNNLElBQUksQ0FBQ0QsUUFBUSxDQUFDLENBQUM7QUFBQyxDQUFDO0FBRTFHLFNBQVNqQiwwQkFBMEIsQ0FBQ2lCLFFBQVEsRUFBRTtJQUFFLE9BQU9KLGlDQUFpQyxDQUFDSyxJQUFJLENBQUNELFFBQVEsQ0FBQyxDQUFDO0FBQUMsQ0FBQztBQUUxRyxTQUFTaEIsNEJBQTRCLENBQUNnQixRQUFRLEVBQUU7SUFBRSxPQUFPSCxtQ0FBbUMsQ0FBQ0ksSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQztBQUFDLENBQUM7QUFFOUcsU0FBU2Ysa0NBQWtDLENBQUNlLFFBQVEsRUFBRTtJQUFFLE9BQU9GLHlDQUF5QyxDQUFDRyxJQUFJLENBQUNELFFBQVEsQ0FBQyxDQUFDO0FBQUMsQ0FBQztBQUUxSCxTQUFTZCxzQ0FBc0MsQ0FBQ2MsUUFBUSxFQUFFO0lBQUUsT0FBT0QsNkNBQTZDLENBQUNFLElBQUksQ0FBQ0QsUUFBUSxDQUFDLENBQUM7QUFBQyxDQUFDO0lBRXpJLFFBT0UsR0FQYTtJQUNibkIsd0JBQXdCLEVBQXhCQSx3QkFBd0I7SUFDeEJDLDBCQUEwQixFQUExQkEsMEJBQTBCO0lBQzFCQywwQkFBMEIsRUFBMUJBLDBCQUEwQjtJQUMxQkMsNEJBQTRCLEVBQTVCQSw0QkFBNEI7SUFDNUJDLGtDQUFrQyxFQUFsQ0Esa0NBQWtDO0lBQ2xDQyxzQ0FBc0MsRUFBdENBLHNDQUFzQztDQUN2QyJ9