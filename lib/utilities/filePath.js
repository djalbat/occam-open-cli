'use strict';

var readmeFilePathPattern = '^(?:[^\\/]+\\/){1}README\\.md$',
    florenceFilePathPattern = '^(?:[^\\/]+\\/){1,}[^\\.]+\\.ocs$',
    metaJSONFilePathPattern = '^(?:[^\\/]+\\/){1}meta\\.json$',
    customGrammarBNFFilePathPattern = '^(?:[^\\/]+\\/){1}(term|expression|statement|metastatement)\\.bnf$',
    customGrammarLexicalPatternFilePathPattern = '^(?:[^\\/]+\\/){1}pattern\\.lex$',
    recognisedFilePathPattern = readmeFilePathPattern + '|' + florenceFilePathPattern + '|' + metaJSONFilePathPattern + '|' + customGrammarBNFFilePathPattern + '|' + customGrammarLexicalPatternFilePathPattern;

var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern),
    metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern),
    recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern);

function isFilePathReadmeFilePath(filePath) {
      return readmeFilePathRegularExpression.test(filePath);
}

function isFilePathMetaJSONFilePath(filePath) {
      return metaJSONFilePathRegularExpression.test(filePath);
}

function isFilePathRecognisedFilePath(filePath) {
      return recognisedFilePathRegularExpression.test(filePath);
}

module.exports = {
      isFilePathReadmeFilePath: isFilePathReadmeFilePath,
      isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
      isFilePathRecognisedFilePath: isFilePathRecognisedFilePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVBhdGguanMiXSwibmFtZXMiOlsicmVhZG1lRmlsZVBhdGhQYXR0ZXJuIiwiZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm4iLCJtZXRhSlNPTkZpbGVQYXRoUGF0dGVybiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4iLCJjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFBhdHRlcm4iLCJyZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuIiwicmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsIlJlZ0V4cCIsIm1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsInJlY29nbmlzZWRGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwiZmlsZVBhdGgiLCJ0ZXN0IiwiaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgiLCJpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsd0JBQXdCLGdDQUE5QjtBQUFBLElBQ01DLDBCQUEwQixtQ0FEaEM7QUFBQSxJQUVNQywwQkFBMEIsZ0NBRmhDO0FBQUEsSUFHTUMsa0NBQWtDLG9FQUh4QztBQUFBLElBSU1DLDZDQUE2QyxrQ0FKbkQ7QUFBQSxJQUtNQyw0QkFBK0JMLHFCQUEvQixTQUF3REMsdUJBQXhELFNBQW1GQyx1QkFBbkYsU0FBOEdDLCtCQUE5RyxTQUFpSkMsMENBTHZKOztBQU9BLElBQU1FLGtDQUFrQyxJQUFJQyxNQUFKLENBQVdQLHFCQUFYLENBQXhDO0FBQUEsSUFDTVEsb0NBQW9DLElBQUlELE1BQUosQ0FBV0wsdUJBQVgsQ0FEMUM7QUFBQSxJQUVNTyxzQ0FBc0MsSUFBSUYsTUFBSixDQUFXRix5QkFBWCxDQUY1Qzs7QUFJQSxTQUFTSyx3QkFBVCxDQUFrQ0MsUUFBbEMsRUFBNEM7QUFBRSxhQUFPTCxnQ0FBZ0NNLElBQWhDLENBQXFDRCxRQUFyQyxDQUFQO0FBQXdEOztBQUV0RyxTQUFTRSwwQkFBVCxDQUFvQ0YsUUFBcEMsRUFBOEM7QUFBRSxhQUFPSCxrQ0FBa0NJLElBQWxDLENBQXVDRCxRQUF2QyxDQUFQO0FBQTBEOztBQUUxRyxTQUFTRyw0QkFBVCxDQUFzQ0gsUUFBdEMsRUFBZ0Q7QUFBRSxhQUFPRixvQ0FBb0NHLElBQXBDLENBQXlDRCxRQUF6QyxDQUFQO0FBQTREOztBQUU5R0ksT0FBT0MsT0FBUCxHQUFpQjtBQUNmTixnQ0FBMEJBLHdCQURYO0FBRWZHLGtDQUE0QkEsMEJBRmI7QUFHZkMsb0NBQThCQTtBQUhmLENBQWpCIiwiZmlsZSI6ImZpbGVQYXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgcmVhZG1lRmlsZVBhdGhQYXR0ZXJuID0gJ14oPzpbXlxcXFwvXStcXFxcLyl7MX1SRUFETUVcXFxcLm1kJCcsXHJcbiAgICAgIGZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuID0gJ14oPzpbXlxcXFwvXStcXFxcLyl7MSx9W15cXFxcLl0rXFxcXC5vY3MkJyxcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFBhdHRlcm4gPSAnXig/OlteXFxcXC9dK1xcXFwvKXsxfW1ldGFcXFxcLmpzb24kJyxcclxuICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybiA9ICdeKD86W15cXFxcL10rXFxcXC8pezF9KHRlcm18ZXhwcmVzc2lvbnxzdGF0ZW1lbnR8bWV0YXN0YXRlbWVudClcXFxcLmJuZiQnLFxyXG4gICAgICBjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFBhdHRlcm4gPSAnXig/OlteXFxcXC9dK1xcXFwvKXsxfXBhdHRlcm5cXFxcLmxleCQnLFxyXG4gICAgICByZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuID0gYCR7cmVhZG1lRmlsZVBhdGhQYXR0ZXJufXwke2Zsb3JlbmNlRmlsZVBhdGhQYXR0ZXJufXwke21ldGFKU09ORmlsZVBhdGhQYXR0ZXJufXwke2N1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm59fCR7Y3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJufWA7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChyZWFkbWVGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKG1ldGFKU09ORmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgcmVjb2duaXNlZEZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKHJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4pO1xyXG5cclxuZnVuY3Rpb24gaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5mdW5jdGlvbiBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gbWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5mdW5jdGlvbiBpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoOiBpc0ZpbGVQYXRoUmVhZG1lRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGg6IGlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGg6IGlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGhcclxufTtcclxuIl19