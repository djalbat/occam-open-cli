"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isFilePathReadmeFilePath: function() {
        return isFilePathReadmeFilePath;
    },
    isFilePathFlorenceFilePath: function() {
        return isFilePathFlorenceFilePath;
    },
    isFilePathMetaJSONFilePath: function() {
        return isFilePathMetaJSONFilePath;
    },
    isFilePathRecognisedFilePath: function() {
        return isFilePathRecognisedFilePath;
    },
    isFilePathCustomGrammarBNFFilePath: function() {
        return isFilePathCustomGrammarBNFFilePath;
    },
    isFilePathCustomGrammarLexicalPatternFilePath: function() {
        return isFilePathCustomGrammarLexicalPatternFilePath;
    },
    default: function() {
        return _default;
    }
});
var readmeFilePathPattern = "^(?:[^\\/]+\\/){1}README\\.md$", florenceFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$", metaJSONFilePathPattern = "^(?:[^\\/]+\\/){1}meta\\.json$", customGrammarBNFFilePathPattern = "^(?:[^\\/]+\\/){1}(type|term|expression|statement|metastatement)\\.bnf$", customGrammarLexicalPatternFilePathPattern = "^(?:[^\\/]+\\/){1}pattern\\.lex$", recognisedFilePathPattern = "".concat(readmeFilePathPattern, "|").concat(florenceFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarLexicalPatternFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern), florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern), metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern), recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern), customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern), customGrammarLexicalPatternFilePathRegularExpression = new RegExp(customGrammarLexicalPatternFilePathPattern);
function isFilePathReadmeFilePath(filePath) {
    return readmeFilePathRegularExpression.test(filePath);
}
function isFilePathFlorenceFilePath(filePath) {
    return florenceFilePathRegularExpression.test(filePath);
}
function isFilePathMetaJSONFilePath(filePath) {
    return metaJSONFilePathRegularExpression.test(filePath);
}
function isFilePathRecognisedFilePath(filePath) {
    return recognisedFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarBNFFilePath(filePath) {
    return customGrammarBNFFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarLexicalPatternFilePath(filePath) {
    return customGrammarLexicalPatternFilePathRegularExpression.test(filePath);
}
var _default = {
    isFilePathReadmeFilePath: isFilePathReadmeFilePath,
    isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
    isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
    isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
    isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
    isFilePathCustomGrammarLexicalPatternFilePath: isFilePathCustomGrammarLexicalPatternFilePath
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1SRUFETUVcXFxcLm1kJFwiLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1bXlxcXFwuXStcXFxcLmZscyRcIixcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1tZXRhXFxcXC5qc29uJFwiLFxyXG4gICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9KHR5cGV8dGVybXxleHByZXNzaW9ufHN0YXRlbWVudHxtZXRhc3RhdGVtZW50KVxcXFwuYm5mJFwiLFxyXG4gICAgICBjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1wYXR0ZXJuXFxcXC5sZXgkXCIsXHJcbiAgICAgIHJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4gPSBgJHtyZWFkbWVGaWxlUGF0aFBhdHRlcm59fCR7ZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm59fCR7bWV0YUpTT05GaWxlUGF0aFBhdHRlcm59fCR7Y3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybn18JHtjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFBhdHRlcm59YDtcclxuXHJcbmNvbnN0IHJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKHJlYWRtZUZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIGZsb3JlbmNlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKG1ldGFKU09ORmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgcmVjb2duaXNlZEZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKHJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGN1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoUGF0dGVybik7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGZsb3JlbmNlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiBtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiBjdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhcclxufTtcclxuIl0sIm5hbWVzIjpbImlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCIsImlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoIiwiaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgiLCJpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoIiwiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aCIsInJlYWRtZUZpbGVQYXRoUGF0dGVybiIsImZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuIiwibWV0YUpTT05GaWxlUGF0aFBhdHRlcm4iLCJjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuIiwicmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiIsInJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJSZWdFeHAiLCJmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJyZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImZpbGVQYXRoIiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7Ozs7OztJQWdCR0Esd0JBQXdCO2VBQXhCQSx3QkFBd0I7O0lBRXhCQywwQkFBMEI7ZUFBMUJBLDBCQUEwQjs7SUFFMUJDLDBCQUEwQjtlQUExQkEsMEJBQTBCOztJQUUxQkMsNEJBQTRCO2VBQTVCQSw0QkFBNEI7O0lBRTVCQyxrQ0FBa0M7ZUFBbENBLGtDQUFrQzs7SUFFbENDLDZDQUE2QztlQUE3Q0EsNkNBQTZDOztJQUU3RCxPQU9FO2VBUEYsUUFPRTs7O0FBakNGLElBQU1DLHFCQUFxQixHQUFHLGdDQUFnQyxFQUN4REMsdUJBQXVCLEdBQUcsbUNBQW1DLEVBQzdEQyx1QkFBdUIsR0FBRyxnQ0FBZ0MsRUFDMURDLCtCQUErQixHQUFHLHlFQUF5RSxFQUMzR0MsMENBQTBDLEdBQUcsa0NBQWtDLEVBQy9FQyx5QkFBeUIsR0FBRyxBQUFDLEVBQUEsQ0FBMkJKLE1BQXVCLENBQWhERCxxQkFBcUIsRUFBQyxHQUFDLENBQTBCLENBQUdFLE1BQXVCLENBQWxERCx1QkFBdUIsRUFBQyxHQUFDLENBQTBCLENBQUdFLE1BQStCLENBQTFERCx1QkFBdUIsRUFBQyxHQUFDLENBQWtDLENBQUdFLE1BQTBDLENBQTdFRCwrQkFBK0IsRUFBQyxHQUFDLENBQTZDLENBQUEsTUFBQSxDQUEzQ0MsMENBQTBDLENBQUUsQUFBQztBQUVwTSxJQUFNRSwrQkFBK0IsR0FBRyxJQUFJQyxNQUFNLENBQUNQLHFCQUFxQixDQUFDLEVBQ25FUSxpQ0FBaUMsR0FBRyxJQUFJRCxNQUFNLENBQUNOLHVCQUF1QixDQUFDLEVBQ3ZFUSxpQ0FBaUMsR0FBRyxJQUFJRixNQUFNLENBQUNMLHVCQUF1QixDQUFDLEVBQ3ZFUSxtQ0FBbUMsR0FBRyxJQUFJSCxNQUFNLENBQUNGLHlCQUF5QixDQUFDLEVBQzNFTSx5Q0FBeUMsR0FBRyxJQUFJSixNQUFNLENBQUNKLCtCQUErQixDQUFDLEVBQ3ZGUyxvREFBb0QsR0FBRyxJQUFJTCxNQUFNLENBQUNILDBDQUEwQyxDQUFDLEFBQUM7QUFFN0csU0FBU1Ysd0JBQXdCLENBQUNtQixRQUFRLEVBQUU7SUFBRSxPQUFPUCwrQkFBK0IsQ0FBQ1EsSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQztDQUFFO0FBRXRHLFNBQVNsQiwwQkFBMEIsQ0FBQ2tCLFFBQVEsRUFBRTtJQUFFLE9BQU9MLGlDQUFpQyxDQUFDTSxJQUFJLENBQUNELFFBQVEsQ0FBQyxDQUFDO0NBQUU7QUFFMUcsU0FBU2pCLDBCQUEwQixDQUFDaUIsUUFBUSxFQUFFO0lBQUUsT0FBT0osaUNBQWlDLENBQUNLLElBQUksQ0FBQ0QsUUFBUSxDQUFDLENBQUM7Q0FBRTtBQUUxRyxTQUFTaEIsNEJBQTRCLENBQUNnQixRQUFRLEVBQUU7SUFBRSxPQUFPSCxtQ0FBbUMsQ0FBQ0ksSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQztDQUFFO0FBRTlHLFNBQVNmLGtDQUFrQyxDQUFDZSxRQUFRLEVBQUU7SUFBRSxPQUFPRix5Q0FBeUMsQ0FBQ0csSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQztDQUFFO0FBRTFILFNBQVNkLDZDQUE2QyxDQUFDYyxRQUFRLEVBQUU7SUFBRSxPQUFPRCxvREFBb0QsQ0FBQ0UsSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQztDQUFFO0lBRXZKLFFBT0UsR0FQYTtJQUNibkIsd0JBQXdCLEVBQXhCQSx3QkFBd0I7SUFDeEJDLDBCQUEwQixFQUExQkEsMEJBQTBCO0lBQzFCQywwQkFBMEIsRUFBMUJBLDBCQUEwQjtJQUMxQkMsNEJBQTRCLEVBQTVCQSw0QkFBNEI7SUFDNUJDLGtDQUFrQyxFQUFsQ0Esa0NBQWtDO0lBQ2xDQyw2Q0FBNkMsRUFBN0NBLDZDQUE2QztDQUM5QyJ9