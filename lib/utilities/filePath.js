"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFilePathReadmeFilePath = isFilePathReadmeFilePath;
exports.isFilePathFlorenceFilePath = isFilePathFlorenceFilePath;
exports.isFilePathMetaJSONFilePath = isFilePathMetaJSONFilePath;
exports.isFilePathRecognisedFilePath = isFilePathRecognisedFilePath;
exports.isFilePathCustomGrammarBNFFilePath = isFilePathCustomGrammarBNFFilePath;
exports.isFilePathCustomGrammarLexicalPatternFilePath = isFilePathCustomGrammarLexicalPatternFilePath;
exports["default"] = void 0;
var readmeFilePathPattern = "^(?:[^\\/]+\\/){1}README\\.md$",
    florenceFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$",
    metaJSONFilePathPattern = "^(?:[^\\/]+\\/){1}meta\\.json$",
    customGrammarBNFFilePathPattern = "^(?:[^\\/]+\\/){1}(term|expression|statement|metastatement)\\.bnf$",
    customGrammarLexicalPatternFilePathPattern = "^(?:[^\\/]+\\/){1}pattern\\.lex$",
    recognisedFilePathPattern = "".concat(readmeFilePathPattern, "|").concat(florenceFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarLexicalPatternFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern),
    florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern),
    metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern),
    recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern),
    customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern),
    customGrammarLexicalPatternFilePathRegularExpression = new RegExp(customGrammarLexicalPatternFilePathPattern);

function isFilePathReadmeFilePath(filePath) {
  return readmeFilePathRegularExpression.test(filePath);
}

function isFilePathFlorenceFilePath(filePath) {
  return florenceFilePathRegularExpression.test(filePath);
}

function isFilePathMetaJSONFilePath(filePath) {
  return metaJSONFilePathRegularExpression.test(filePath);
}

function isFilePathRecognisedFilePath(filePath) {
  return recognisedFilePathRegularExpression.test(filePath);
}

function isFilePathCustomGrammarBNFFilePath(filePath) {
  return customGrammarBNFFilePathRegularExpression.test(filePath);
}

function isFilePathCustomGrammarLexicalPatternFilePath(filePath) {
  return customGrammarLexicalPatternFilePathRegularExpression.test(filePath);
}

var _default = {
  isFilePathReadmeFilePath: isFilePathReadmeFilePath,
  isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
  isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
  isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
  isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
  isFilePathCustomGrammarLexicalPatternFilePath: isFilePathCustomGrammarLexicalPatternFilePath
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGVQYXRoLmpzIl0sIm5hbWVzIjpbInJlYWRtZUZpbGVQYXRoUGF0dGVybiIsImZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuIiwibWV0YUpTT05GaWxlUGF0aFBhdHRlcm4iLCJjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuIiwicmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiIsInJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJSZWdFeHAiLCJmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJyZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCIsImZpbGVQYXRoIiwidGVzdCIsImlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoIiwiaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgiLCJpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoIiwiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLHFCQUFxQixHQUFHLGdDQUE5QjtBQUFBLElBQ01DLHVCQUF1QixHQUFHLG1DQURoQztBQUFBLElBRU1DLHVCQUF1QixHQUFHLGdDQUZoQztBQUFBLElBR01DLCtCQUErQixHQUFHLG9FQUh4QztBQUFBLElBSU1DLDBDQUEwQyxHQUFHLGtDQUpuRDtBQUFBLElBS01DLHlCQUF5QixhQUFNTCxxQkFBTixjQUErQkMsdUJBQS9CLGNBQTBEQyx1QkFBMUQsY0FBcUZDLCtCQUFyRixjQUF3SEMsMENBQXhILENBTC9CO0FBT0EsSUFBTUUsK0JBQStCLEdBQUcsSUFBSUMsTUFBSixDQUFXUCxxQkFBWCxDQUF4QztBQUFBLElBQ01RLGlDQUFpQyxHQUFHLElBQUlELE1BQUosQ0FBV04sdUJBQVgsQ0FEMUM7QUFBQSxJQUVNUSxpQ0FBaUMsR0FBRyxJQUFJRixNQUFKLENBQVdMLHVCQUFYLENBRjFDO0FBQUEsSUFHTVEsbUNBQW1DLEdBQUcsSUFBSUgsTUFBSixDQUFXRix5QkFBWCxDQUg1QztBQUFBLElBSU1NLHlDQUF5QyxHQUFHLElBQUlKLE1BQUosQ0FBV0osK0JBQVgsQ0FKbEQ7QUFBQSxJQUtNUyxvREFBb0QsR0FBRyxJQUFJTCxNQUFKLENBQVdILDBDQUFYLENBTDdEOztBQU9PLFNBQVNTLHdCQUFULENBQWtDQyxRQUFsQyxFQUE0QztBQUFFLFNBQU9SLCtCQUErQixDQUFDUyxJQUFoQyxDQUFxQ0QsUUFBckMsQ0FBUDtBQUF3RDs7QUFFdEcsU0FBU0UsMEJBQVQsQ0FBb0NGLFFBQXBDLEVBQThDO0FBQUUsU0FBT04saUNBQWlDLENBQUNPLElBQWxDLENBQXVDRCxRQUF2QyxDQUFQO0FBQTBEOztBQUUxRyxTQUFTRywwQkFBVCxDQUFvQ0gsUUFBcEMsRUFBOEM7QUFBRSxTQUFPTCxpQ0FBaUMsQ0FBQ00sSUFBbEMsQ0FBdUNELFFBQXZDLENBQVA7QUFBMEQ7O0FBRTFHLFNBQVNJLDRCQUFULENBQXNDSixRQUF0QyxFQUFnRDtBQUFFLFNBQU9KLG1DQUFtQyxDQUFDSyxJQUFwQyxDQUF5Q0QsUUFBekMsQ0FBUDtBQUE0RDs7QUFFOUcsU0FBU0ssa0NBQVQsQ0FBNENMLFFBQTVDLEVBQXNEO0FBQUUsU0FBT0gseUNBQXlDLENBQUNJLElBQTFDLENBQStDRCxRQUEvQyxDQUFQO0FBQWtFOztBQUUxSCxTQUFTTSw2Q0FBVCxDQUF1RE4sUUFBdkQsRUFBaUU7QUFBRSxTQUFPRixvREFBb0QsQ0FBQ0csSUFBckQsQ0FBMERELFFBQTFELENBQVA7QUFBNkU7O2VBRXhJO0FBQ2JELEVBQUFBLHdCQUF3QixFQUF4QkEsd0JBRGE7QUFFYkcsRUFBQUEsMEJBQTBCLEVBQTFCQSwwQkFGYTtBQUdiQyxFQUFBQSwwQkFBMEIsRUFBMUJBLDBCQUhhO0FBSWJDLEVBQUFBLDRCQUE0QixFQUE1QkEsNEJBSmE7QUFLYkMsRUFBQUEsa0NBQWtDLEVBQWxDQSxrQ0FMYTtBQU1iQyxFQUFBQSw2Q0FBNkMsRUFBN0NBO0FBTmEsQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuY29uc3QgcmVhZG1lRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9UkVBRE1FXFxcXC5tZCRcIixcclxuICAgICAgZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MSx9W15cXFxcLl0rXFxcXC5mbHMkXCIsXHJcbiAgICAgIG1ldGFKU09ORmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9bWV0YVxcXFwuanNvbiRcIixcclxuICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxfSh0ZXJtfGV4cHJlc3Npb258c3RhdGVtZW50fG1ldGFzdGF0ZW1lbnQpXFxcXC5ibmYkXCIsXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxfXBhdHRlcm5cXFxcLmxleCRcIixcclxuICAgICAgcmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiA9IGAke3JlYWRtZUZpbGVQYXRoUGF0dGVybn18JHtmbG9yZW5jZUZpbGVQYXRoUGF0dGVybn18JHttZXRhSlNPTkZpbGVQYXRoUGF0dGVybn18JHtjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJufXwke2N1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoUGF0dGVybn1gO1xyXG5cclxuY29uc3QgcmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVhZG1lRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIG1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAobWV0YUpTT05GaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoY3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoUmVhZG1lRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIHJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIG1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIHJlY29nbmlzZWRGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGN1c3RvbUdyYW1tYXJMZXhpY2FsUGF0dGVybkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBpc0ZpbGVQYXRoUmVhZG1lRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aFJlY29nbmlzZWRGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm5GaWxlUGF0aFxyXG59O1xyXG4iXX0=