"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isFilePathReadmeFilePath: function() {
        return isFilePathReadmeFilePath;
    },
    isFilePathFlorenceFilePath: function() {
        return isFilePathFlorenceFilePath;
    },
    isFilePathMetaJSONFilePath: function() {
        return isFilePathMetaJSONFilePath;
    },
    isFilePathRecognisedFilePath: function() {
        return isFilePathRecognisedFilePath;
    },
    isFilePathCustomGrammarBNFFilePath: function() {
        return isFilePathCustomGrammarBNFFilePath;
    },
    isFilePathCustomGrammarPatternFilePath: function() {
        return isFilePathCustomGrammarPatternFilePath;
    },
    default: function() {
        return _default;
    }
});
var readmeFilePathPattern = "^(?:[^\\/]+\\/){1}README\\.md$", florenceFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$", metaJSONFilePathPattern = "^(?:[^\\/]+\\/){1}meta\\.json$", customGrammarBNFFilePathPattern = "^(?:[^\\/]+\\/){1}(term|expression|statement|metastatement)\\.bnf$", customGrammarPatternFilePathPattern = "^(?:[^\\/]+\\/){1}(type|operator)\\.ptn$", recognisedFilePathPattern = "".concat(readmeFilePathPattern, "|").concat(florenceFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarPatternFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern), florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern), metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern), recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern), customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern), customGrammarPatternFilePathRegularExpression = new RegExp(customGrammarPatternFilePathPattern);
function isFilePathReadmeFilePath(filePath) {
    return readmeFilePathRegularExpression.test(filePath);
}
function isFilePathFlorenceFilePath(filePath) {
    return florenceFilePathRegularExpression.test(filePath);
}
function isFilePathMetaJSONFilePath(filePath) {
    return metaJSONFilePathRegularExpression.test(filePath);
}
function isFilePathRecognisedFilePath(filePath) {
    return recognisedFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarBNFFilePath(filePath) {
    return customGrammarBNFFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarPatternFilePath(filePath) {
    return customGrammarPatternFilePathRegularExpression.test(filePath);
}
var _default = {
    isFilePathReadmeFilePath: isFilePathReadmeFilePath,
    isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
    isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
    isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
    isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
    isFilePathCustomGrammarPatternFilePath: isFilePathCustomGrammarPatternFilePath
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1SRUFETUVcXFxcLm1kJFwiLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1bXlxcXFwuXStcXFxcLmZscyRcIixcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1tZXRhXFxcXC5qc29uJFwiLFxyXG4gICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9KHRlcm18ZXhwcmVzc2lvbnxzdGF0ZW1lbnR8bWV0YXN0YXRlbWVudClcXFxcLmJuZiRcIixcclxuICAgICAgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX0odHlwZXxvcGVyYXRvcilcXFxcLnB0biRcIixcclxuICAgICAgcmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiA9IGAke3JlYWRtZUZpbGVQYXRoUGF0dGVybn18JHtmbG9yZW5jZUZpbGVQYXRoUGF0dGVybn18JHttZXRhSlNPTkZpbGVQYXRoUGF0dGVybn18JHtjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJufXwke2N1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJufWA7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChyZWFkbWVGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChtZXRhSlNPTkZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIHJlY29nbmlzZWRGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChyZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoUmVhZG1lRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIHJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIG1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIHJlY29nbmlzZWRGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFxyXG59O1xyXG4iXSwibmFtZXMiOlsiaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwiaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgiLCJpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCIsImlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgiLCJpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoIiwiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgiLCJyZWFkbWVGaWxlUGF0aFBhdHRlcm4iLCJmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiIsIm1ldGFKU09ORmlsZVBhdGhQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybiIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuIiwicmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiIsInJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJSZWdFeHAiLCJmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJyZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiZmlsZVBhdGgiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBZ0JHQSx3QkFBd0I7ZUFBeEJBLHdCQUF3Qjs7SUFFeEJDLDBCQUEwQjtlQUExQkEsMEJBQTBCOztJQUUxQkMsMEJBQTBCO2VBQTFCQSwwQkFBMEI7O0lBRTFCQyw0QkFBNEI7ZUFBNUJBLDRCQUE0Qjs7SUFFNUJDLGtDQUFrQztlQUFsQ0Esa0NBQWtDOztJQUVsQ0Msc0NBQXNDO2VBQXRDQSxzQ0FBc0M7O0lBRXRELE9BT0U7ZUFQRixRQU9FOzs7QUFqQ0YsSUFBTUMscUJBQXFCLEdBQUcsZ0NBQWdDLEVBQ3hEQyx1QkFBdUIsR0FBRyxtQ0FBbUMsRUFDN0RDLHVCQUF1QixHQUFHLGdDQUFnQyxFQUMxREMsK0JBQStCLEdBQUcsb0VBQW9FLEVBQ3RHQyxtQ0FBbUMsR0FBRywwQ0FBMEMsRUFDaEZDLHlCQUF5QixHQUFHLEFBQUMsRUFBQSxDQUEyQkosTUFBdUIsQ0FBaERELHFCQUFxQixFQUFDLEdBQUMsQ0FBMEIsQ0FBR0UsTUFBdUIsQ0FBbERELHVCQUF1QixFQUFDLEdBQUMsQ0FBMEIsQ0FBR0UsTUFBK0IsQ0FBMURELHVCQUF1QixFQUFDLEdBQUMsQ0FBa0MsQ0FBR0UsTUFBbUMsQ0FBdEVELCtCQUErQixFQUFDLEdBQUMsQ0FBc0MsQ0FBQSxNQUFBLENBQXBDQyxtQ0FBbUMsQ0FBRSxBQUFDO0FBRTdMLElBQU1FLCtCQUErQixHQUFHLElBQUlDLE1BQU0sQ0FBQ1AscUJBQXFCLENBQUMsRUFDbkVRLGlDQUFpQyxHQUFHLElBQUlELE1BQU0sQ0FBQ04sdUJBQXVCLENBQUMsRUFDdkVRLGlDQUFpQyxHQUFHLElBQUlGLE1BQU0sQ0FBQ0wsdUJBQXVCLENBQUMsRUFDdkVRLG1DQUFtQyxHQUFHLElBQUlILE1BQU0sQ0FBQ0YseUJBQXlCLENBQUMsRUFDM0VNLHlDQUF5QyxHQUFHLElBQUlKLE1BQU0sQ0FBQ0osK0JBQStCLENBQUMsRUFDdkZTLDZDQUE2QyxHQUFHLElBQUlMLE1BQU0sQ0FBQ0gsbUNBQW1DLENBQUMsQUFBQztBQUUvRixTQUFTVix3QkFBd0IsQ0FBQ21CLFFBQVEsRUFBRTtJQUFFLE9BQU9QLCtCQUErQixDQUFDUSxJQUFJLENBQUNELFFBQVEsQ0FBQyxDQUFDO0NBQUU7QUFFdEcsU0FBU2xCLDBCQUEwQixDQUFDa0IsUUFBUSxFQUFFO0lBQUUsT0FBT0wsaUNBQWlDLENBQUNNLElBQUksQ0FBQ0QsUUFBUSxDQUFDLENBQUM7Q0FBRTtBQUUxRyxTQUFTakIsMEJBQTBCLENBQUNpQixRQUFRLEVBQUU7SUFBRSxPQUFPSixpQ0FBaUMsQ0FBQ0ssSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQztDQUFFO0FBRTFHLFNBQVNoQiw0QkFBNEIsQ0FBQ2dCLFFBQVEsRUFBRTtJQUFFLE9BQU9ILG1DQUFtQyxDQUFDSSxJQUFJLENBQUNELFFBQVEsQ0FBQyxDQUFDO0NBQUU7QUFFOUcsU0FBU2Ysa0NBQWtDLENBQUNlLFFBQVEsRUFBRTtJQUFFLE9BQU9GLHlDQUF5QyxDQUFDRyxJQUFJLENBQUNELFFBQVEsQ0FBQyxDQUFDO0NBQUU7QUFFMUgsU0FBU2Qsc0NBQXNDLENBQUNjLFFBQVEsRUFBRTtJQUFFLE9BQU9ELDZDQUE2QyxDQUFDRSxJQUFJLENBQUNELFFBQVEsQ0FBQyxDQUFDO0NBQUU7SUFFekksUUFPRSxHQVBhO0lBQ2JuQix3QkFBd0IsRUFBeEJBLHdCQUF3QjtJQUN4QkMsMEJBQTBCLEVBQTFCQSwwQkFBMEI7SUFDMUJDLDBCQUEwQixFQUExQkEsMEJBQTBCO0lBQzFCQyw0QkFBNEIsRUFBNUJBLDRCQUE0QjtJQUM1QkMsa0NBQWtDLEVBQWxDQSxrQ0FBa0M7SUFDbENDLHNDQUFzQyxFQUF0Q0Esc0NBQXNDO0NBQ3ZDIn0=