'use strict';

var necessary = require('necessary');

var constants = require('./constants');

var _process = process,
    stdin = _process.stdin,
    stdout = _process.stdout,
    asynchronousUtilities = necessary.asynchronousUtilities,
    whilst = asynchronousUtilities.whilst,
    CTRL_C = constants.CTRL_C,
    LINE_FEED = constants.LINE_FEED,
    CARRIAGE_RETURN = constants.CARRIAGE_RETURN,
    BACKSPACE = constants.BACKSPACE;


function prompt(options, callback) {
  var value = null,
      context = Object.assign(options, {
    value: value
  });

  whilst(attempt, function () {
    var value = context.value;


    callback(value);
  }, context);
}

module.exports = prompt;

function attempt(next, done, context) {
  var attempts = context.attempts;


  var terminate = attempts-- === 0;

  if (terminate) {
    done();

    return;
  }

  var description = context.description,
      validationPattern = context.validationPattern,
      validationFunction = context.validationFunction,
      errorMessage = context.errorMessage,
      hidden = context.hidden;


  hidden ? hiddenInput(description, callback) : visibleInput(description, callback);

  function callback(value) {
    var valid = validationFunction ? ///
    validationFunction(value) : validationPattern.test(value);

    if (valid) {
      Object.assign(context, {
        value: value
      });

      done();
    } else {
      console.log(errorMessage);

      Object.assign(context, {
        attempts: attempts
      });

      next();
    }
  }
}

function visibleInput(description, callback) {
  var encoding = 'utf8',
      rawMode = false;

  stdout.write(description);

  stdin.setEncoding(encoding);

  stdin.setRawMode(rawMode);

  stdin.resume();

  stdin.on('data', function (chunk) {
    var value = chunk.trim();

    stdin.removeAllListeners('data');

    stdin.pause();

    callback(value);
  });
}

function hiddenInput(description, callback) {
  var encoding = 'utf8',
      rawMode = true;

  stdout.write(description);

  stdin.setEncoding(encoding);

  stdin.setRawMode(rawMode);

  stdin.resume();

  var value = '';

  stdin.on('data', function (chunk) {
    var char = chunk.toString(encoding);

    switch (char) {
      case LINE_FEED:
      case CARRIAGE_RETURN:
        stdout.write(LINE_FEED);

        stdin.removeAllListeners('data');

        stdin.pause();

        callback(value);
        break;

      case CTRL_C:
        console.log();

        process.exit();
        break;

      case BACKSPACE:
        value = truncate(value);

        stdout.clearLine();

        stdout.cursorTo(0);

        stdout.write(description);
        break;

      default:
        value += char;
        break;
    }
  });
}

function truncate(value) {
  return value.slice(0, value.length - 1);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,