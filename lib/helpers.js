'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fsExtra = require('fs-extra');

var async = require('./async'),
    pathUtil = require('./util/path'),
    pathMapsUtil = require('./util/pathMaps');

var helpers = function () {
  function helpers() {
    _classCallCheck(this, helpers);
  }

  _createClass(helpers, null, [{
    key: 'moveEntries',
    value: function moveEntries(pathMaps, projectsDirectoryPath, callback) {
      var targetPaths = [];

      pathMapsUtil.asyncForEachWithSourcePathAndTargetPath(pathMaps, function (sourcePath, targetPath, next) {
        moveEntry(sourcePath, targetPath, projectsDirectoryPath, function (targetPath) {
          targetPaths.push(targetPath);

          next();
        });
      }, function () {
        callback(targetPaths);
      });
    }
  }, {
    key: 'removeEntries',
    value: function removeEntries(pathMaps, projectsDirectoryPath, callback) {
      var targetPaths = [];

      pathMapsUtil.asyncForEachWithSourcePathAndTargetPath(pathMaps, function (sourcePath, targetPath, next) {
        removeEntry(sourcePath, targetPath, projectsDirectoryPath, function (targetPath) {
          targetPaths.push(targetPath);

          next();
        });
      }, function () {
        callback(targetPaths);
      });
    }
  }]);

  return helpers;
}();

module.exports = helpers;

function moveEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
  if (sourcePath === targetPath) {
    callback(targetPath);
  } else {
    var absoluteSourcePath = pathUtil.combinePaths(projectsDirectoryPath, sourcePath),
        exists = fsExtra.existsSync(absoluteSourcePath);

    if (!exists) {
      targetPath = null;

      callback(targetPath);
    } else {
      var sourcePathDirectoryPath = pathUtil.isDirectoryPath(sourcePath),
          entryDirectory = sourcePathDirectoryPath;

      entryDirectory ? moveDirectory(sourcePath, targetPath, projectsDirectoryPath, callback) : moveFile(sourcePath, targetPath, projectsDirectoryPath, callback);
    }
  }
}

function removeEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
  if (sourcePath === targetPath) {
    callback(targetPath);
  } else {
    var absoluteSourcePath = pathUtil.combinePaths(projectsDirectoryPath, sourcePath),
        exists = fsExtra.existsSync(absoluteSourcePath);

    if (!exists) {
      targetPath = null;

      callback(targetPath);
    } else {
      var sourcePathDirectoryPath = pathUtil.isDirectoryPath(sourcePath),
          entryDirectory = sourcePathDirectoryPath;

      entryDirectory ? removeDirectory(sourcePath, projectsDirectoryPath, callback) : removeFile(sourcePath, projectsDirectoryPath, callback);
    }
  }
}

function moveFile(sourcePath, targetPath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = pathUtil.combinePaths(projectsDirectoryPath, sourcePath),
      absoluteTargetPath = pathUtil.combinePaths(projectsDirectoryPath, targetPath);

  fsExtra.move(absoluteSourcePath, absoluteTargetPath, function (err) {
    var success = err === null,
        targetPath = success ? targetPath : sourcePath;

    callback(targetPath);
  });
}

function removeFile(sourcePath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = pathUtil.combinePaths(projectsDirectoryPath, sourcePath);

  fsExtra.remove(absoluteSourcePath, function (err) {
    var success = err === null,
        targetPath = success ? null : sourcePath;

    callback(targetPath);
  });
}

function moveDirectory(sourcePath, targetPath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = pathUtil.combinePaths(projectsDirectoryPath, sourcePath),
      absoluteTargetPath = pathUtil.combinePaths(projectsDirectoryPath, targetPath),
      empty = pathUtil.isDirectoryEmpty(absoluteSourcePath);

  if (!empty) {
    var _targetPath = sourcePath;

    callback(_targetPath);
  } else {
    fsExtra.move(absoluteSourcePath, absoluteTargetPath, function (err) {
      var success = err === null;

      if (success) {
        callback(targetPath);
      } else {
        var errCode = err.code; ///

        if (errCode !== 'EEXIST') {
          var _targetPath2 = sourcePath;

          callback(_targetPath2);
        } else {
          removeDirectory(sourcePath, projectsDirectoryPath, callback);
        }
      }
    });
  }
}

function removeDirectory(sourcePath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = pathUtil.combinePaths(projectsDirectoryPath, sourcePath),
      empty = pathUtil.isDirectoryEmpty(absoluteSourcePath);

  if (!empty) {
    var targetPath = sourcePath;

    callback(targetPath);
  } else {
    fsExtra.remove(absoluteSourcePath, function (err) {
      var success = err === null,
          targetPath = success ? null : sourcePath;

      callback(targetPath);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,