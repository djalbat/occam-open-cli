'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fsExtra = require('fs-extra'),
    necessary = require('necessary');

var pathMapsUtilities = require('./utilities/pathMaps');

var move = fsExtra.move,
    remove = fsExtra.remove,
    path = necessary.path,
    fileSystem = necessary.fileSystem,
    concatenatePaths = path.concatenatePaths,
    entryExists = fileSystem.entryExists,
    isEntryDirectory = fileSystem.isEntryDirectory,
    isDirectoryEmpty = fileSystem.isDirectoryEmpty;

var helpers = function () {
  function helpers() {
    _classCallCheck(this, helpers);
  }

  _createClass(helpers, null, [{
    key: 'moveEntries',
    value: function moveEntries(pathMaps, projectsDirectoryPath, callback) {
      var targetPaths = [];

      pathMapsUtilities.asyncForEachWithSourcePathAndTargetPath(pathMaps, function (sourcePath, targetPath, next) {
        moveEntry(sourcePath, targetPath, projectsDirectoryPath, function (targetPath) {
          targetPaths.push(targetPath);

          next();
        });
      }, function () {
        callback(targetPaths);
      });
    }
  }, {
    key: 'removeEntries',
    value: function removeEntries(pathMaps, projectsDirectoryPath, callback) {
      var targetPaths = [];

      pathMapsUtilities.asyncForEachWithSourcePathAndTargetPath(pathMaps, function (sourcePath, targetPath, next) {
        removeEntry(sourcePath, targetPath, projectsDirectoryPath, function (targetPath) {
          targetPaths.push(targetPath);

          next();
        });
      }, function () {
        callback(targetPaths);
      });
    }
  }]);

  return helpers;
}();

module.exports = helpers;

function moveEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
  if (sourcePath === targetPath) {
    callback(targetPath);
  } else {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
        exists = entryExists(absoluteSourcePath);

    if (!exists) {
      targetPath = null;

      callback(targetPath);
    } else {
      var entryDirectory = isEntryDirectory(absoluteSourcePath);

      entryDirectory ? moveDirectory(sourcePath, targetPath, projectsDirectoryPath, callback) : moveFile(sourcePath, targetPath, projectsDirectoryPath, callback);
    }
  }
}

function removeEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
  if (sourcePath === targetPath) {
    callback(targetPath);
  } else {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
        exists = entryExists(absoluteSourcePath);

    if (!exists) {
      targetPath = null;

      callback(targetPath);
    } else {
      var entryDirectory = isEntryDirectory(absoluteSourcePath);

      entryDirectory ? removeDirectory(sourcePath, projectsDirectoryPath, callback) : removeFile(sourcePath, projectsDirectoryPath, callback);
    }
  }
}

function moveFile(sourcePath, targetPath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
      absoluteTargetPath = concatenatePaths(projectsDirectoryPath, targetPath);

  move(absoluteSourcePath, absoluteTargetPath, function (err) {
    var success = err === null;

    targetPath = success ? targetPath : sourcePath;

    callback(targetPath);
  });
}

function removeFile(sourcePath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath);

  remove(absoluteSourcePath, function (err) {
    var success = err === null,
        targetPath = success ? null : sourcePath;

    callback(targetPath);
  });
}

function moveDirectory(sourcePath, targetPath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
      absoluteTargetPath = concatenatePaths(projectsDirectoryPath, targetPath),
      empty = isDirectoryEmpty(absoluteSourcePath);

  if (!empty) {
    var _targetPath = sourcePath;

    callback(_targetPath);
  } else {
    move(absoluteSourcePath, absoluteTargetPath, function (err) {
      var success = err === null;

      if (success) {
        callback(targetPath);
      } else {
        var errCode = err.code; ///

        if (errCode !== 'EEXIST') {
          var _targetPath2 = sourcePath;

          callback(_targetPath2);
        } else {
          remove(absoluteSourcePath, function (err) {
            var success = err === null;

            if (!success) {
              targetPath = sourcePath;
            }

            callback(targetPath);
          });
        }
      }
    });
  }
}

function removeDirectory(sourcePath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
      empty = isDirectoryEmpty(absoluteSourcePath);

  if (!empty) {
    var targetPath = sourcePath;

    callback(targetPath);
  } else {
    remove(absoluteSourcePath, function (err) {
      var success = err === null,
          targetPath = success ? null : sourcePath;

      callback(targetPath);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbImZzRXh0cmEiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwicGF0aE1hcHNVdGlsaXRpZXMiLCJtb3ZlIiwicmVtb3ZlIiwicGF0aCIsImZpbGVTeXN0ZW0iLCJjb25jYXRlbmF0ZVBhdGhzIiwiZW50cnlFeGlzdHMiLCJpc0VudHJ5RGlyZWN0b3J5IiwiaXNEaXJlY3RvcnlFbXB0eSIsImhlbHBlcnMiLCJwYXRoTWFwcyIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImNhbGxiYWNrIiwidGFyZ2V0UGF0aHMiLCJhc3luY0ZvckVhY2hXaXRoU291cmNlUGF0aEFuZFRhcmdldFBhdGgiLCJzb3VyY2VQYXRoIiwidGFyZ2V0UGF0aCIsIm5leHQiLCJtb3ZlRW50cnkiLCJwdXNoIiwicmVtb3ZlRW50cnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWJzb2x1dGVTb3VyY2VQYXRoIiwiZXhpc3RzIiwiZW50cnlEaXJlY3RvcnkiLCJtb3ZlRGlyZWN0b3J5IiwibW92ZUZpbGUiLCJyZW1vdmVEaXJlY3RvcnkiLCJyZW1vdmVGaWxlIiwiYWJzb2x1dGVUYXJnZXRQYXRoIiwiZXJyIiwic3VjY2VzcyIsImVtcHR5IiwiZXJyQ29kZSIsImNvZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLFVBQVIsQ0FBaEI7QUFBQSxJQUNNQyxZQUFZRCxRQUFRLFdBQVIsQ0FEbEI7O0FBR0EsSUFBTUUsb0JBQW9CRixRQUFRLHNCQUFSLENBQTFCOztJQUVRRyxJLEdBQWlCSixPLENBQWpCSSxJO0lBQU1DLE0sR0FBV0wsTyxDQUFYSyxNO0lBQ05DLEksR0FBcUJKLFMsQ0FBckJJLEk7SUFBTUMsVSxHQUFlTCxTLENBQWZLLFU7SUFDTkMsZ0IsR0FBcUJGLEksQ0FBckJFLGdCO0lBQ0FDLFcsR0FBb0RGLFUsQ0FBcERFLFc7SUFBYUMsZ0IsR0FBdUNILFUsQ0FBdkNHLGdCO0lBQWtCQyxnQixHQUFx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QUVPO0FBQ0wsWUFBTWtCLFVBQVVILElBQUlJLElBQXBCLENBREssQ0FDcUI7O0FBRTFCLFlBQUlELFlBQVksUUFBaEIsRUFBMEI7QUFDeEIsY0FBTWxCLGVBQWFELFVBQW5COztBQUVBSCxtQkFBU0ksWUFBVDtBQUNELFNBSkQsTUFJTztBQUNMZCxpQkFBT3FCLGtCQUFQLEVBQTJCLFVBQVNRLEdBQVQsRUFBYztBQUN2QyxnQkFBTUMsVUFBV0QsUUFBUSxJQUF6Qjs7QUFFQSxnQkFBSSxDQUFDQyxPQUFMLEVBQWM7QUFDWmhCLDJCQUFhRCxVQUFiO0FBQ0Q7O0FBRURILHFCQUFTSSxVQUFUO0FBQ0QsV0FSRDtBQVNEO0FBQ0Y7QUFDRixLQXhCRDtBQXlCRDtBQUNGOztBQUVELFNBQVNZLGVBQVQsQ0FBeUJiLFVBQXpCLEVBQXFDSixxQkFBckMsRUFBNERDLFFBQTVELEVBQXNFO0FBQ3BFLE1BQU1XLHFCQUFxQmxCLGlCQUFpQk0scUJBQWpCLEVBQXdDSSxVQUF4QyxDQUEzQjtBQUFBLE1BQ01rQixRQUFRekIsaUJBQWlCZSxrQkFBakIsQ0FEZDs7QUFHQSxNQUFJLENBQUNVLEtBQUwsRUFBWTtBQUNWLFFBQU1qQixhQUFhRCxVQUFuQjs7QUFFQUgsYUFBU0ksVUFBVDtBQUNELEdBSkQsTUFJTztBQUNMZCxXQUFPcUIsa0JBQVAsRUFBMkIsVUFBU1EsR0FBVCxFQUFjO0FBQ3ZDLFVBQU1DLFVBQVdELFFBQVEsSUFBekI7QUFBQSxVQUNNZixhQUFhZ0IsVUFDRyxJQURILEdBRUtqQixVQUh4Qjs7QUFLQUgsZUFBU0ksVUFBVDtBQUNELEtBUEQ7QUFRRDtBQUNGIiwiZmlsZSI6ImhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZzRXh0cmEgPSByZXF1aXJlKCdmcy1leHRyYScpLFxuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHBhdGhNYXBzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcGF0aE1hcHMnKTtcblxuY29uc3QgeyBtb3ZlLCByZW1vdmUgfSA9IGZzRXh0cmEsXG4gICAgICB7IHBhdGgsIGZpbGVTeXN0ZW0gfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aCxcbiAgICAgIHsgZW50cnlFeGlzdHMsIGlzRW50cnlEaXJlY3RvcnksIGlzRGlyZWN0b3J5RW1wdHkgfSA9IGZpbGVTeXN0ZW07XG5cbmNsYXNzIGhlbHBlcnMge1xuICBzdGF0aWMgbW92ZUVudHJpZXMocGF0aE1hcHMsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCB0YXJnZXRQYXRocyA9IFtdO1xuXG4gICAgcGF0aE1hcHNVdGlsaXRpZXMuYXN5bmNGb3JFYWNoV2l0aFNvdXJjZVBhdGhBbmRUYXJnZXRQYXRoKFxuICAgICAgcGF0aE1hcHMsIFxuICAgICAgZnVuY3Rpb24oc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgbmV4dCkge1xuICAgICAgICBtb3ZlRW50cnkoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBmdW5jdGlvbih0YXJnZXRQYXRoKSB7XG4gICAgICAgICAgdGFyZ2V0UGF0aHMucHVzaCh0YXJnZXRQYXRoKTtcbiAgICAgICAgICBcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0YXJnZXRQYXRocyk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyByZW1vdmVFbnRyaWVzKHBhdGhNYXBzLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdGFyZ2V0UGF0aHMgPSBbXTtcblxuICAgIHBhdGhNYXBzVXRpbGl0aWVzLmFzeW5jRm9yRWFjaFdpdGhTb3VyY2VQYXRoQW5kVGFyZ2V0UGF0aChcbiAgICAgIHBhdGhNYXBzLFxuICAgICAgZnVuY3Rpb24oc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgbmV4dCkge1xuICAgICAgICByZW1vdmVFbnRyeShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGZ1bmN0aW9uKHRhcmdldFBhdGgpIHtcbiAgICAgICAgICB0YXJnZXRQYXRocy5wdXNoKHRhcmdldFBhdGgpO1xuXG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGFyZ2V0UGF0aHMpO1xuICAgICAgfVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoZWxwZXJzO1xuXG5mdW5jdGlvbiBtb3ZlRW50cnkoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBpZiAoc291cmNlUGF0aCA9PT0gdGFyZ2V0UGF0aCkge1xuICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGFic29sdXRlU291cmNlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VQYXRoKSxcbiAgICAgICAgICBleGlzdHMgPSBlbnRyeUV4aXN0cyhhYnNvbHV0ZVNvdXJjZVBhdGgpO1xuXG4gICAgaWYgKCFleGlzdHMpIHtcbiAgICAgIHRhcmdldFBhdGggPSBudWxsO1xuXG4gICAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlU291cmNlUGF0aCk7XG5cbiAgICAgIGVudHJ5RGlyZWN0b3J5ID9cbiAgICAgICAgbW92ZURpcmVjdG9yeShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSA6XG4gICAgICAgICAgbW92ZUZpbGUoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVudHJ5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgaWYgKHNvdXJjZVBhdGggPT09IHRhcmdldFBhdGgpIHtcbiAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBhYnNvbHV0ZVNvdXJjZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlUGF0aCksXG4gICAgICAgICAgZXhpc3RzID0gZW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VQYXRoKTtcblxuICAgIGlmICghZXhpc3RzKSB7XG4gICAgICB0YXJnZXRQYXRoID0gbnVsbDtcblxuICAgICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVudHJ5RGlyZWN0b3J5ID0gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVNvdXJjZVBhdGgpO1xuXG4gICAgICBlbnRyeURpcmVjdG9yeSA/XG4gICAgICAgIHJlbW92ZURpcmVjdG9yeShzb3VyY2VQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSA6XG4gICAgICAgICAgcmVtb3ZlRmlsZShzb3VyY2VQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbW92ZUZpbGUoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRQYXRoKTtcblxuICBtb3ZlKGFic29sdXRlU291cmNlUGF0aCwgYWJzb2x1dGVUYXJnZXRQYXRoLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgY29uc3Qgc3VjY2VzcyA9IChlcnIgPT09IG51bGwpO1xuICAgIFxuICAgIHRhcmdldFBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICB0YXJnZXRQYXRoIDpcbiAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBhdGg7XG5cbiAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpbGUoc291cmNlUGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlUGF0aCk7XG5cbiAgcmVtb3ZlKGFic29sdXRlU291cmNlUGF0aCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgY29uc3Qgc3VjY2VzcyA9IChlcnIgPT09IG51bGwpLFxuICAgICAgICAgIHRhcmdldFBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICBudWxsIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBhdGg7XG5cbiAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1vdmVEaXJlY3Rvcnkoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRQYXRoKSxcbiAgICAgICAgZW1wdHkgPSBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlU291cmNlUGF0aCk7XG5cbiAgaWYgKCFlbXB0eSkge1xuICAgIGNvbnN0IHRhcmdldFBhdGggPSBzb3VyY2VQYXRoO1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0gZWxzZSB7XG4gICAgbW92ZShhYnNvbHV0ZVNvdXJjZVBhdGgsIGFic29sdXRlVGFyZ2V0UGF0aCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgY29uc3Qgc3VjY2VzcyA9IChlcnIgPT09IG51bGwpO1xuXG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGVyckNvZGUgPSBlcnIuY29kZTsgLy8vXG5cbiAgICAgICAgaWYgKGVyckNvZGUgIT09ICdFRVhJU1QnKSB7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0UGF0aCA9IHNvdXJjZVBhdGg7XG5cbiAgICAgICAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmUoYWJzb2x1dGVTb3VyY2VQYXRoLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoZXJyID09PSBudWxsKTtcblxuICAgICAgICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgICAgICAgIHRhcmdldFBhdGggPSBzb3VyY2VQYXRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURpcmVjdG9yeShzb3VyY2VQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFic29sdXRlU291cmNlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VQYXRoKSxcbiAgICAgICAgZW1wdHkgPSBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlU291cmNlUGF0aCk7XG5cbiAgaWYgKCFlbXB0eSkge1xuICAgIGNvbnN0IHRhcmdldFBhdGggPSBzb3VyY2VQYXRoO1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0gZWxzZSB7XG4gICAgcmVtb3ZlKGFic29sdXRlU291cmNlUGF0aCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBjb25zdCBzdWNjZXNzID0gKGVyciA9PT0gbnVsbCksXG4gICAgICAgICAgICB0YXJnZXRQYXRoID0gc3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VQYXRoO1xuXG4gICAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgICB9KTtcbiAgfVxufVxuIl19